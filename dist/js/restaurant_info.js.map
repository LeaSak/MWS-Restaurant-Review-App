{"version":3,"sources":["restaurant_info.js"],"names":["window","initMap","fetchRestaurantFromURL","maps","Map","document","restaurant","zoom","latlng","center","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","self","map","addListener","querySelector","iFrame","catch","console","error","id","getParameterByName","fillRestaurantHTML","then","arguments","length","undefined","addressTitle","getElementById","textContent","name","src","imageUrlForRestaurant","image","sizes","srcset","setAttribute","alt","cuisineTitle","srcsetForRestaurant","operating_hours","cuisine_type","fillRestaurantHoursHTML","fillReviewsHTML","hours","row","createElement","day","className","key","appendChild","time","operatingHours","reviews","container","title","noReviews","ul","createReviewHTML","review","li","nameBox","date","rating","comments","breadcrumb","url","location","href","exec","regex","results","decodeURIComponent","replace"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["/**\n * Initialize Google map, called from HTML.\n */\n\nwindow.initMap = () => {\n    fetchRestaurantFromURL()\n    .then((restaurant) => {\n            self.map = new google.maps.Map(document.getElementById('map'), {\n                zoom: 16,\n                center: restaurant.latlng,\n                scrollwheel: false\n            });\n            \n            fillBreadcrumb();\n            \n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n            \n            let setTitle = () => {\n                const iFrame = document.querySelector('#map iframe');\n                iFrame.setAttribute('title', 'Map with selected restaurant marker');\n            }\n            self.map.addListener('tilesloaded', setTitle);\n    })\n    .catch(error => {\n        console.error(error);\n    });\n};\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = () => {\n    const id = getParameterByName('id');\n    if (self.restaurant) {\n        return self.restaurant;\n    }\n    \n    else {\n        return DBHelper.fetchRestaurantById(id)\n            .then((restaurant) => {\n                self.restaurant = restaurant;\n                fillRestaurantHTML();\n                return restaurant;\n            })\n            .catch(error => {\n                if (!id || !restaurant) {\n                    console.error(error);\n                }\n            });\n\n    }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n    const name = document.getElementById('restaurant-name');\n    name.textContent = restaurant.name;\n\n    const addressTitle = document.getElementById('address-title');\n    addressTitle.textContent = 'Address';\n\n    const address = document.getElementById('restaurant-address');\n    address.textContent = restaurant.address;\n\n    const image = document.getElementById('restaurant-img');\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\n    image.setAttribute('alt', restaurant.alt);\n    image.sizes = '100vw';\n    image.srcset = DBHelper.srcsetForRestaurant(restaurant);\n\n    const cuisineTitle = document.getElementById('cuisine-title');\n    cuisineTitle.textContent = 'Cuisine';\n\n    const cuisine = document.getElementById('restaurant-cuisine');\n    cuisine.textContent = restaurant.cuisine_type;\n\n    // fill operating hours\n    if (restaurant.operating_hours) {\n        const hourTitle = document.getElementById('hours-title');\n        hourTitle.textContent = 'Operating Hours';\n\n        fillRestaurantHoursHTML();\n    }\n    // fill reviews\n    fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n    const hours = document.getElementById('restaurant-hours');\n\n    for (let key in operatingHours) {\n        const row = document.createElement('tr');\n\n        const day = document.createElement('td');\n        day.textContent = key;\n        day.className = 'day';\n        row.appendChild(day);\n\n        const time = document.createElement('td');\n        time.textContent = operatingHours[key];\n        time.className = 'time';\n        row.appendChild(time);\n\n        hours.appendChild(row);\n    }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n    const container = document.getElementById('reviews-container');\n    const title = document.createElement('h2');\n    title.className = 'review-section-title';\n    title.textContent = 'Reviews';\n    container.appendChild(title);\n\n    if (!reviews) {\n        const noReviews = document.createElement('p');\n        noReviews.textContent = 'No reviews yet!';\n        container.appendChild(noReviews);\n        return;\n    }\n    const ul = document.getElementById('reviews-list');\n    reviews.forEach(review => {\n        ul.appendChild(createReviewHTML(review));\n    });\n    container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n    const li = document.createElement('li');\n    li.className = 'reviews-list-item';\n\n    const nameBox = document.createElement('div');\n    nameBox.className = 'name-container';\n\n    const name = document.createElement('p');\n    name.textContent = review.name;\n    li.appendChild(nameBox);\n    nameBox.appendChild(name);\n\n    const date = document.createElement('p');\n    date.textContent = review.date;\n    date.className = 'review-date';\n    nameBox.appendChild(date);\n\n    const rating = document.createElement('p');\n    rating.textContent = `Rating: ${review.rating}`;\n    rating.className = 'rating';\n    li.appendChild(rating);\n\n    const comments = document.createElement('p');\n    comments.textContent = review.comments;\n    comments.className = 'comments';\n    li.appendChild(comments);\n\n    return li;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n    const breadcrumb = document.getElementById('breadcrumb');\n    const li = document.createElement('li');\n    li.textContent = restaurant.name;\n    breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n    if (!url)\n        url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n        results = regex.exec(url);\n    if (!results)\n        return null;\n    if (!results[2])\n        return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};"]}