{"version":3,"sources":["restaurant_info.js"],"names":["map","restaurant","window","initMap","fetchRestaurantFromURL","error","self","google","maps","Map","document","getElementById","console","center","latlng","scrollwheel","callback","id","getParameterByName","DBHelper","fetchRestaurantById","fillRestaurantHTML","arguments","length","undefined","innerHTML","name","image","addressTitle","alt","sizes","address","setAttribute","cuisine_type","cuisineTitle","cuisine","fillReviewsHTML","fillRestaurantHoursHTML","operatingHours","operating_hours","key","row","createElement","day","hours","time","appendChild","reviews","container","title","className","noReviews","review","createReviewHTML","ul","nameBox","li","date","rating","comments","fillBreadcrumb","breadcrumb","url","location","href","replace","results","decodeURIComponent"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nvar map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n    fetchRestaurantFromURL((error, restaurant) => {\n        if (error) { // Got an error!\n            console.error(error);\n        } else {\n            self.map = new google.maps.Map(document.getElementById('map'), {\n                zoom: 16,\n                center: restaurant.latlng,\n                scrollwheel: false\n            });\n            fillBreadcrumb();\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n        }\n    });\n}\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n    if (self.restaurant) { // restaurant already fetched!\n        callback(null, self.restaurant)\n        return;\n    }\n    const id = getParameterByName('id');\n    if (!id) { // no id found in URL\n        error = 'No restaurant id in URL'\n        callback(error, null);\n    } else {\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n            self.restaurant = restaurant;\n            if (!restaurant) {\n                console.error(error);\n                return;\n            }\n            fillRestaurantHTML();\n            callback(null, restaurant)\n        });\n    }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n    const name = document.getElementById('restaurant-name');\n    name.innerHTML = restaurant.name;\n\n    const addressTitle = document.getElementById('address-title');\n    addressTitle.innerHTML = 'Address';\n\n    const address = document.getElementById('restaurant-address');\n    address.innerHTML = restaurant.address;\n\n    const image = document.getElementById('restaurant-img');\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\n    image.setAttribute('alt', restaurant.alt);\n    image.sizes = '100vw';\n    image.srcset = DBHelper.srcsetForRestaurant(restaurant);\n\n    const cuisineTitle = document.getElementById('cuisine-title');\n    cuisineTitle.innerHTML = 'Cuisine';\n\n    const cuisine = document.getElementById('restaurant-cuisine');\n    cuisine.innerHTML = restaurant.cuisine_type;\n\n    // fill operating hours\n    if (restaurant.operating_hours) {\n        const hourTitle = document.getElementById('hours-title');\n        hourTitle.innerHTML = 'Operating Hours';\n        \n        fillRestaurantHoursHTML();\n    }\n    // fill reviews\n    fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n    const hours = document.getElementById('restaurant-hours');\n    for (let key in operatingHours) {\n        const row = document.createElement('tr');\n\n        const day = document.createElement('td');\n        day.innerHTML = key;\n        day.className = 'day';\n        row.appendChild(day);\n\n        const time = document.createElement('td');\n        time.innerHTML = operatingHours[key];\n        time.className = 'time';\n        row.appendChild(time);\n\n        hours.appendChild(row);\n    }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n    const container = document.getElementById('reviews-container');\n    const title = document.createElement('h2');\n    title.className = 'review-section-title';\n    title.innerHTML = 'Reviews';\n    container.appendChild(title);\n\n    if (!reviews) {\n        const noReviews = document.createElement('p');\n        noReviews.innerHTML = 'No reviews yet!';\n        container.appendChild(noReviews);\n        return;\n    }\n    const ul = document.getElementById('reviews-list');\n    reviews.forEach(review => {\n        ul.appendChild(createReviewHTML(review));\n    });\n    container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n    const li = document.createElement('li');\n    li.className = 'reviews-list-item';\n    \n    const nameBox = document.createElement('div');\n    nameBox.className = 'name-container';\n\n    const name = document.createElement('p');\n    name.innerHTML = review.name;\n    li.appendChild(nameBox);\n    nameBox.appendChild(name);\n\n    const date = document.createElement('p');\n    date.innerHTML = review.date;\n    date.className = 'review-date';\n    nameBox.appendChild(date);\n\n    const rating = document.createElement('p');\n    rating.innerHTML = `Rating: ${review.rating}`;\n    rating.className = 'rating';\n    li.appendChild(rating);\n\n    const comments = document.createElement('p');\n    comments.innerHTML = review.comments;\n    comments.className = 'comments';\n    li.appendChild(comments);\n\n    return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n    const breadcrumb = document.getElementById('breadcrumb');\n    const li = document.createElement('li');\n    li.innerHTML = restaurant.name;\n    breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n    if (!url)\n        url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n        results = regex.exec(url);\n    if (!results)\n        return null;\n    if (!results[2])\n        return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}"]}