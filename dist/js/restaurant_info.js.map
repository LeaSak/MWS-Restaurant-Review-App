{"version":3,"sources":["restaurant_info.js"],"names":["document","addEventListener","event","fetchRestaurantFromURL","DBHelper","toggleMap","toggleButtonState","formListener","window","initMap","restaurant","arguments","length","undefined","self","map","google","maps","Map","getElementById","zoom","center","latlng","mapMarkerForRestaurant","addListener","setTitle","querySelector","id","getParameterByName","then","log","fillRestaurantHTML","fillBreadcrumb","catch","logError","textContent","name","address","saveButton","setAttribute","is_favorite","image","src","imageUrlForRestaurant","sizes","srcset","srcsetForRestaurant","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","row","createElement","day","key","appendChild","time","appendReview","review","ul","fetchReviewsById","reviews","container","noReviews","forEach","createReviewHTML","li","classList","add","date","Date","updatedAt","toLocaleString","nameDiv","reviewerName","reviewDate","rating","comments","reviewerNameInput","reviewerRatingInput","reviewerCommentsInput","e","preventDefault","reviewerRating","reviewerComments","value","restaurant_id","console","postReviewtoServer","breadcrumb","url","results","location","href","decodeURIComponent","exec","replace"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["\n\ndocument.addEventListener('DOMContentLoaded', (event) => {\n    fetchRestaurantFromURL();\n    DBHelper.toggleMap('map-anchor', 'map-section');\n    DBHelper.toggleButtonState();\n    formListener();\n});\n\n\n/**\n * Initialize Google map\n */\nwindow.initMap = (restaurant = self.restaurant) => {\n    self.map = new google.maps.Map(document.getElementById('map'), {\n                zoom: 16,\n                center: restaurant.latlng,\n                scrollwheel: false\n            });\n\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n\n            let setTitle = () => {\n                const iFrame = document.querySelector('#map iframe');\n                iFrame.setAttribute('title', 'Map with selected restaurant marker');\n            }\n            self.map.addListener('tilesloaded', setTitle);\n};\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = () => {\n    if (self.restaurant) {\n        return self.restaurant;\n    }\n\n    const id = getParameterByName('id');\n    return DBHelper.fetchRestaurantById(id)\n    .then((restaurant) => {\n                self.restaurant = restaurant;\n                console.log(restaurant);\n                fillRestaurantHTML();\n                return restaurant;\n    })\n    .then((restaurant) => {\n        fillBreadcrumb(restaurant)\n        return restaurant;\n    })\n    .catch(DBHelper.logError);\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n    const name = document.getElementById('restaurant-name');\n    name.textContent = restaurant.name;\n\n    const addressTitle = document.getElementById('address-title');\n    addressTitle.textContent = 'Address';\n\n    const address = document.getElementById('restaurant-address');\n    address.textContent = restaurant.address;\n\n    const saveButton = document.getElementById('save');\n    saveButton.setAttribute('data-restaurant-id', restaurant.id);\n    saveButton.setAttribute('aria-pressed', restaurant.is_favorite);\n\n    const image = document.getElementById('restaurant-img');\n    image.setAttribute('alt', restaurant.name);\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\n    image.sizes = '100vw';\n    image.srcset = DBHelper.srcsetForRestaurant(restaurant);\n\n    const cuisineTitle = document.getElementById('cuisine-title');\n    cuisineTitle.textContent = 'Cuisine';\n\n    const cuisine = document.getElementById('restaurant-cuisine');\n    cuisine.textContent = restaurant.cuisine_type;\n\n    // fill operating hours\n    if (restaurant.operating_hours) {\n        const hourTitle = document.getElementById('hours-title');\n        hourTitle.textContent = 'Operating Hours';\n\n        fillRestaurantHoursHTML();\n    }\n    // fill reviews\n    fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n    const hours = document.getElementById('restaurant-hours');\n\n    for (let key in operatingHours) {\n        const row = document.createElement('tr');\n\n        const day = document.createElement('td');\n        day.textContent = key;\n        day.className = 'day';\n        row.appendChild(day);\n\n        const time = document.createElement('td');\n        time.textContent = operatingHours[key];\n        time.className = 'time';\n        row.appendChild(time);\n\n        hours.appendChild(row);\n    }\n};\n\nconst appendReview = (review) => {\n    const ul = document.getElementById('reviews-list');\n    const formattedReview = createReviewHTML(review);\n    ul.appendChild(formattedReview);\n}\n\n/**\n * Fetch reviews from Database or network\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = () => {\n\n    // Fetch all restaurant reviews and append to page\n    return DBHelper.fetchReviewsById(restaurant.id)\n    .then((reviews) => {\n        const container = document.getElementById('reviews-container');\n\n        if (reviews.length === 0) {\n            const noReviews = document.createElement('p');\n            noReviews.textContent = 'No reviews yet!';\n            container.appendChild(noReviews);\n            return;\n        }\n\n        reviews.forEach((review) => {\n            appendReview(review);\n        });\n\n    })\n    .catch(DBHelper.logError);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n    const li = document.createElement('li');\n    li.classList.add('reviews-list-item');\n\n    const dateOptions = { year: 'numeric', month: 'long', day: 'numeric' };\n    const date = new Date(review.updatedAt).toLocaleString('en-US', dateOptions);\n\n    const nameDiv = document.createElement('div');\n\n    nameDiv.classList.add('name-container');\n    const reviewerName = document.createElement('p');\n    reviewerName.textContent = review.name;\n\n    const reviewDate = document.createElement('p');\n    reviewDate.classList.add('review-date');\n    reviewDate.textContent = date;\n\n    nameDiv.appendChild(reviewerName);\n    nameDiv.appendChild(reviewDate);\n    li.appendChild(nameDiv);\n\n    const rating = document.createElement('p');\n    rating.classList.add('rating');\n    rating.textContent = 'Rating: ' + review.rating;\n    li.appendChild(rating);\n\n    const comments = document.createElement('p');\n    comments.classList.add('comments');\n    comments.textContent = review.comments;\n    li.appendChild(comments);\n\n    return li;\n};\n\nconst formListener = () => {\n    const form = document.getElementById('review-form');\n    const reviewerNameInput = document.getElementById('reviewer-name');\n    const reviewerRatingInput = document.getElementById('reviewer-rating');\n    const reviewerCommentsInput = document.getElementById('review-text');\n\n    form.addEventListener('submit', (e) => {\n        e.preventDefault();\n        const reviewerName = reviewerNameInput.value;\n        const reviewerRating = reviewerRatingInput.value;\n        const reviewerComments = reviewerCommentsInput.value;\n\n        const review = {\n            restaurant_id: getParameterByName('id'),\n            name: reviewerName,\n            rating: reviewerRating,\n            comments: reviewerComments,\n            updatedAt: new Date()\n\n        }\n\n        console.log(review);\n        // TODO: Could add it after form\n        appendReview(review);\n        // submit review to server\n        DBHelper.postReviewtoServer(review);\n\n\n\n    });\n\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\n\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n    const breadcrumb = document.getElementById('breadcrumb');\n    const li = document.createElement('li');\n    li.textContent = restaurant.name;\n    breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n    if (!url)\n        url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n        results = regex.exec(url);\n    if (!results)\n        return null;\n    if (!results[2])\n        return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};"]}