{"version":3,"sources":["restaurant_info.js"],"names":["window","initMap","fetchRestaurantFromURL","self","map","google","maps","Map","document","getElementById","zoom","restaurant","latlng","center","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","setMapTitle","iFrame","querySelector","catch","console","error","id","getParameterByName","fillRestaurantHTML","then","arguments","length","undefined","addressTitle","innerHTML","name","src","imageUrlForRestaurant","image","sizes","srcset","setAttribute","alt","cuisineTitle","srcsetForRestaurant","operating_hours","cuisine_type","fillRestaurantHoursHTML","fillReviewsHTML","hours","row","createElement","day","className","key","appendChild","time","operatingHours","reviews","container","title","noReviews","ul","createReviewHTML","review","li","nameBox","date","rating","comments","breadcrumb","url","location","href","exec","regex","results","decodeURIComponent","replace"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["/**\n * Initialize Google map, called from HTML.\n */\n\nwindow.initMap = () => {\n    fetchRestaurantFromURL()\n    .then((restaurant) => {\n        let setMapTitle = () => {\n                const iFrame = document.querySelector('#map iframe');\n                iFrame.setAttribute('title', 'Map with selected restaurant marker');\n            }\n            self.map = new google.maps.Map(document.getElementById('map'), {\n                zoom: 16,\n                center: restaurant.latlng,\n                scrollwheel: false\n            });\n            fillBreadcrumb();\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n            self.map.addListener('tilesloaded', setMapTitle);\n    })\n    .catch(error => {\n        console.error(error);\n    });\n};\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = () => {\n    const id = getParameterByName('id');\n    if (self.restaurant) {\n        return self.restaurant;\n    }\n    \n    else {\n        return DBHelper.fetchRestaurantById(id)\n            .then((restaurant) => {\n                self.restaurant = restaurant;\n                fillRestaurantHTML();\n                return restaurant;\n            })\n            .catch(error => {\n                if (!id || !restaurant) {\n                    console.error(error);\n                }\n            });\n\n    }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n    const name = document.getElementById('restaurant-name');\n    name.innerHTML = restaurant.name;\n\n    const addressTitle = document.getElementById('address-title');\n    addressTitle.innerHTML = 'Address';\n\n    const address = document.getElementById('restaurant-address');\n    address.innerHTML = restaurant.address;\n\n    const image = document.getElementById('restaurant-img');\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\n    image.setAttribute('alt', restaurant.alt);\n    image.sizes = '100vw';\n    image.srcset = DBHelper.srcsetForRestaurant(restaurant);\n\n    const cuisineTitle = document.getElementById('cuisine-title');\n    cuisineTitle.innerHTML = 'Cuisine';\n\n    const cuisine = document.getElementById('restaurant-cuisine');\n    cuisine.innerHTML = restaurant.cuisine_type;\n\n    // fill operating hours\n    if (restaurant.operating_hours) {\n        const hourTitle = document.getElementById('hours-title');\n        hourTitle.innerHTML = 'Operating Hours';\n\n        fillRestaurantHoursHTML();\n    }\n    // fill reviews\n    fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n    const hours = document.getElementById('restaurant-hours');\n\n    for (let key in operatingHours) {\n        const row = document.createElement('tr');\n\n        const day = document.createElement('td');\n        day.innerHTML = key;\n        day.className = 'day';\n        row.appendChild(day);\n\n        const time = document.createElement('td');\n        time.innerHTML = operatingHours[key];\n        time.className = 'time';\n        row.appendChild(time);\n\n        hours.appendChild(row);\n    }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n    const container = document.getElementById('reviews-container');\n    const title = document.createElement('h2');\n    title.className = 'review-section-title';\n    title.innerHTML = 'Reviews';\n    container.appendChild(title);\n\n    if (!reviews) {\n        const noReviews = document.createElement('p');\n        noReviews.innerHTML = 'No reviews yet!';\n        container.appendChild(noReviews);\n        return;\n    }\n    const ul = document.getElementById('reviews-list');\n    reviews.forEach(review => {\n        ul.appendChild(createReviewHTML(review));\n    });\n    container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n    const li = document.createElement('li');\n    li.className = 'reviews-list-item';\n\n    const nameBox = document.createElement('div');\n    nameBox.className = 'name-container';\n\n    const name = document.createElement('p');\n    name.innerHTML = review.name;\n    li.appendChild(nameBox);\n    nameBox.appendChild(name);\n\n    const date = document.createElement('p');\n    date.innerHTML = review.date;\n    date.className = 'review-date';\n    nameBox.appendChild(date);\n\n    const rating = document.createElement('p');\n    rating.innerHTML = `Rating: ${review.rating}`;\n    rating.className = 'rating';\n    li.appendChild(rating);\n\n    const comments = document.createElement('p');\n    comments.innerHTML = review.comments;\n    comments.className = 'comments';\n    li.appendChild(comments);\n\n    return li;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n    const breadcrumb = document.getElementById('breadcrumb');\n    const li = document.createElement('li');\n    li.innerHTML = restaurant.name;\n    breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n    if (!url)\n        url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n        results = regex.exec(url);\n    if (!results)\n        return null;\n    if (!results[2])\n        return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};"]}