{"version":3,"sources":["restaurant_info.js"],"names":["window","initMap","fetchRestaurantFromURL","maps","Map","document","restaurant","zoom","latlng","center","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","self","map","addListener","querySelector","iFrame","catch","console","error","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","arguments","length","undefined","getElementById","name","addressTitle","address","image","src","imageUrlForRestaurant","setAttribute","sizes","srcsetForRestaurant","cuisineTitle","cuisine","operating_hours","hourTitle","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","key","hours","day","row","className","createElement","appendChild","time","reviews","container","title","textContent","ul","noReviews","review","createReviewHTML","li","nameBox","date","rating","comments","breadcrumb","url","location","href","replace","results","RegExp","exec","regex"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["/**\n * Initialize Google map, called from HTML.\n */\n\nwindow.initMap = () => {\n    fetchRestaurantFromURL()\n    .then((restaurant) => {\n            self.map = new google.maps.Map(document.getElementById('map'), {\n                zoom: 16,\n                center: restaurant.latlng,\n                scrollwheel: false\n            });\n            \n            fillBreadcrumb();\n            \n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n            \n            let setTitle = () => {\n                const iFrame = document.querySelector('#map iframe');\n                iFrame.setAttribute('title', 'Map with selected restaurant marker');\n            }\n            self.map.addListener('tilesloaded', setTitle);\n    })\n    .catch(error => {\n        console.error(error);\n    });\n};\n/**\n * Get current restaurant from page URL.\n * Error handling is in window.initMap()\n */\nconst fetchRestaurantFromURL = () => {\n    if (self.restaurant) {\n        return self.restaurant;\n    }\n\n    const id = getParameterByName('id');\n    return DBHelper.fetchRestaurantById(id)\n        .then((restaurant) => {\n                self.restaurant = restaurant;\n                fillRestaurantHTML();\n                return restaurant;\n    })\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n    const name = document.getElementById('restaurant-name');\n    name.textContent = restaurant.name;\n\n    const addressTitle = document.getElementById('address-title');\n    addressTitle.textContent = 'Address';\n\n    const address = document.getElementById('restaurant-address');\n    address.textContent = restaurant.address;\n\n    const image = document.getElementById('restaurant-img');\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\n    image.setAttribute('alt', restaurant.alt);\n    image.sizes = '100vw';\n    image.srcset = DBHelper.srcsetForRestaurant(restaurant);\n\n    const cuisineTitle = document.getElementById('cuisine-title');\n    cuisineTitle.textContent = 'Cuisine';\n\n    const cuisine = document.getElementById('restaurant-cuisine');\n    cuisine.textContent = restaurant.cuisine_type;\n\n    // fill operating hours\n    if (restaurant.operating_hours) {\n        const hourTitle = document.getElementById('hours-title');\n        hourTitle.textContent = 'Operating Hours';\n\n        fillRestaurantHoursHTML();\n    }\n    // fill reviews\n    fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\n // TOD0: Template\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n    const hours = document.getElementById('restaurant-hours');\n\n    for (let key in operatingHours) {\n        const row = document.createElement('tr');\n\n        const day = document.createElement('td');\n        day.textContent = key;\n        day.className = 'day';\n        row.appendChild(day);\n\n        const time = document.createElement('td');\n        time.textContent = operatingHours[key];\n        time.className = 'time';\n        row.appendChild(time);\n\n        hours.appendChild(row);\n    }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\n // TOD0: Template\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n    const container = document.getElementById('reviews-container');\n    const title = document.createElement('h2');\n    title.className = 'review-section-title';\n    title.textContent = 'Reviews';\n    container.appendChild(title);\n\n    if (!reviews) {\n        const noReviews = document.createElement('p');\n        noReviews.textContent = 'No reviews yet!';\n        container.appendChild(noReviews);\n        return;\n    }\n    const ul = document.getElementById('reviews-list');\n    reviews.forEach(review => {\n        ul.appendChild(createReviewHTML(review));\n    });\n    container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\n\n// TOD0: Template\nconst createReviewHTML = (review) => {\n    const li = document.createElement('li');\n    li.className = 'reviews-list-item';\n\n    const nameBox = document.createElement('div');\n    nameBox.className = 'name-container';\n\n    const name = document.createElement('p');\n    name.textContent = review.name;\n    li.appendChild(nameBox);\n    nameBox.appendChild(name);\n\n    const date = document.createElement('p');\n    date.textContent = review.date;\n    date.className = 'review-date';\n    nameBox.appendChild(date);\n\n    const rating = document.createElement('p');\n    rating.textContent = `Rating: ${review.rating}`;\n    rating.className = 'rating';\n    li.appendChild(rating);\n\n    const comments = document.createElement('p');\n    comments.textContent = review.comments;\n    comments.className = 'comments';\n    li.appendChild(comments);\n\n    return li;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\n\n // TOD0: Template\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n    const breadcrumb = document.getElementById('breadcrumb');\n    const li = document.createElement('li');\n    li.textContent = restaurant.name;\n    breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n    if (!url)\n        url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n        results = regex.exec(url);\n    if (!results)\n        return null;\n    if (!results[2])\n        return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};"]}