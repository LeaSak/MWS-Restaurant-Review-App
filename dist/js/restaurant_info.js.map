{"version":3,"sources":["restaurant_info.js"],"names":["document","addEventListener","event","fetchRestaurantFromURL","DBHelper","toggleMap","toggleButtonState","window","initMap","restaurant","arguments","length","undefined","self","map","google","maps","Map","getElementById","zoom","center","latlng","mapMarkerForRestaurant","addListener","setTitle","querySelector","id","getParameterByName","then","log","fillRestaurantHTML","fillBreadcrumb","catch","logError","textContent","name","address","saveButton","setAttribute","is_favorite","image","src","imageUrlForRestaurant","sizes","srcset","srcsetForRestaurant","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","row","createElement","day","key","appendChild","time","container","title","className","fetchReviewsById","reviews","noReviews","ul","innerHTML","createReviewHTML","review","join","date","Date","createdAt","toLocaleString","year","month","console","reviewHTML","rating","comments","breadcrumb","li","url","location","href","replace","results","RegExp","exec","decodeURIComponent"],"mappings":"aAEAA,SAASC,iBAAiB,mBAAoB,SAAAC,GAC1CC,yBACAC,SAASC,UAAU,aAAc,eACjCD,SAASE,sBAOsCC,OAAAC,QAAjCC,WAAiC,IAAAA,EAAA,EAAAC,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAAG,KAAAJ,WAC/CI,KAAKC,IAAM,IAAIC,OAAOC,KAAKC,IAAIjB,SAASkB,eAAe,OAAQ,CAApDC,KAAIJ,GAAgDK,OAAAX,EAAAY,OAE3CZ,aAAWY,IAIvBjB,SAASkB,uBAAuBT,KAAKJ,WAAYI,KAAKC,KAEtDD,KAAAC,IAAAS,YAAA,cAAe,WAAXC,SAAiBC,cAAA,eACFzB,aAASyB,QAAc,0CAStD,IAAMtB,uBAAyB,WAAzBA,GAAAA,KAAAA,WACEU,OAAKJ,KAAAA,WAIT,IAAMiB,EAAKC,mBAAmB,MAA9B,OAAMD,SAAKC,oBAAXD,GACAE,KAAA,SAAOxB,GAKYK,OAHFA,KAAAA,WAAaA,EACVoB,QAAIpB,IAAAA,GACZqB,qBACOrB,IAGfsB,KAAAA,SAAAA,GAGHC,OAFGD,eAAOtB,GAEJL,IAAN4B,MAAM5B,SAAS6B,WAMdH,mBAAqB,WAAkC,IAAjCrB,EAAiC,EAAAC,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApBG,KAAKJ,WAC7BT,SAASkB,eAAe,mBAChCgB,YAAczB,EAAW0B,KAETnC,SAASkB,eAAe,iBAChCgB,YAAc,UAEXlC,SAASkB,eAAe,sBAChCgB,YAAczB,EAAW2B,QAEjC,IAAMC,EAAarC,SAASkB,eAAe,QAC3CmB,EAAWC,aAAa,qBAAsB7B,EAAWiB,IACzDW,EAAWC,aAAa,eAAgB7B,EAAW8B,aAEnD,IAAMC,EAAQxC,SAASkB,eAAe,mBACtCsB,EAAMF,aAAa,MAAO7B,EAAW0B,MACrCK,EAAMC,IAAMrC,SAASsC,sBAAsBjC,GAC3C+B,EAAMG,MAAQ,QACdH,EAAMI,OAASxC,SAASyC,oBAAoBpC,GAEvBT,SAASkB,eAAe,iBAChCgB,YAAc,UAEXlC,SAASkB,eAAe,sBAChCgB,YAAczB,EAAWqC,aAG7BrC,EAAWsC,mBACO/C,SAASkB,eAAe,eAChCgB,YAAc,kBAExBc,2BAGJC,mBAMED,wBAA0B,WAAsD,IAAtDE,EAAsD,EAAAxC,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAhFsC,KAAAA,WAAgFD,gBAArDG,EAAAA,SAAqDhC,eAAA,oBAClF,IAAMiC,IAAAA,KAAQnD,EAASkB,CAGnB,IAAMkC,EAAMpD,SAASqD,cAAc,MAA7BD,EAAMpD,SAASqD,cAAc,MAGnCC,EAAIpB,YAAcqB,EADlBD,EAAMA,UAAMtD,MACZsD,EAAIpB,YAAJoB,GAEAF,IAAII,EAAAA,SAAJH,cAAA,MAGAI,EAAKvB,YAAcgB,EAAeK,GADlCE,EAAMA,UAAOzD,OACbyD,EAAAA,YAAAA,GAEAL,EAAII,YAAYC,KAUlBR,gBAAkB,WACpB,IAAMS,EAAY1D,SAASkB,eAAe,qBADxC+B,EAAAA,SAAkBI,cAAlBJ,MASF,OARAU,EAAMD,UAAY1D,uBAClB2D,EAAMA,YAAQ3D,UACd2D,EAAMC,YAAYD,GAClBA,QAAMzB,IAAAA,WAAcR,IAKbtB,SAASyD,iBAAiBpD,WAAWiB,IAD5CE,KAAA,SAAAkC,GAII,GAAuB,IAAnBA,EAAQnD,OAAc,CAAtBmD,IAAAA,EAAA9D,SAAsBqD,cAAA,KAGtBK,OAFAK,EAAMA,YAAY/D,uBAClB+D,EAAU7B,YAAV6B,GAKJ,IAAMC,EAAKhE,SAASkB,eAAe,gBAAnC8C,EAAAC,UAAWjE,EAASkB,IAAAA,SAAAA,GAAAA,OAAegD,iBAAnCC,KAAAC,KAAA,IACAJ,EAAGC,YAAYH,KAXZ9B,MAgBNA,SAAM5B,WAML8D,iBAAmB,SAAAC,GACrB,IACME,EAAO,IAAIC,KAAKH,EAAOI,WAAWC,eAAe,QADjCC,CAAAA,KAAM,UAAWC,MAAO,OAAQpB,IAAK,YAqBN,OAnBrDqB,QAAQ9C,IAAIwC,GAENO,wFALVT,EAAAhC,KAKUyC,4CAI2BP,EAJ3BO,2DAM0BT,EAAOU,OANjCD,qCAOoBT,EAAOW,SAP3BF,mBAiBJ7C,eAAiB,WAAkC,IAAjCtB,EAAiC,EAAAC,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApBG,KAAKJ,WAO1CsE,EAAA/E,SAAAkB,eAAA,cALU8D,EAAKhF,SAASqD,cAAc,MAClC2B,EAAG9C,YAAczB,EAAW0B,KAO1BR,EAAAA,YAAqBqD,IAQvBrD,mBACI,SAAOQ,EAAP8C,GACJA,IAVJA,EAAA1E,OAAA2E,SAAAC,MAGIhD,EAAOA,EAAKiD,QAAQ,UAAW,QAC/B,IACIC,EADU,IAAIC,OAAJ,OAAkBnD,EAAlB,qBACMoD,KAAKN,GACzB,OAAKI,EAEAA,EAAQ,GAENG,mBAAmBH,EAAQ,GAAGD,QAAQ,MAAO,MADzC,GAFA","file":"restaurant_info.js","sourcesContent":["\n\ndocument.addEventListener('DOMContentLoaded', (event) => {\n    fetchRestaurantFromURL();\n    DBHelper.toggleMap('map-anchor', 'map-section');\n    DBHelper.toggleButtonState();\n});\n\n\n/**\n * Initialize Google map\n */\nwindow.initMap = (restaurant = self.restaurant) => {\n    self.map = new google.maps.Map(document.getElementById('map'), {\n                zoom: 16,\n                center: restaurant.latlng,\n                scrollwheel: false\n            });\n\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n\n            let setTitle = () => {\n                const iFrame = document.querySelector('#map iframe');\n                iFrame.setAttribute('title', 'Map with selected restaurant marker');\n            }\n            self.map.addListener('tilesloaded', setTitle);\n};\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = () => {\n    if (self.restaurant) {\n        return self.restaurant;\n    }\n\n    const id = getParameterByName('id');\n    return DBHelper.fetchRestaurantById(id)\n    .then((restaurant) => {\n                self.restaurant = restaurant;\n                console.log(restaurant);\n                fillRestaurantHTML();\n                return restaurant;\n    })\n    .then((restaurant) => {\n        fillBreadcrumb(restaurant)\n        return restaurant;\n    })\n    .catch(DBHelper.logError);\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n    const name = document.getElementById('restaurant-name');\n    name.textContent = restaurant.name;\n\n    const addressTitle = document.getElementById('address-title');\n    addressTitle.textContent = 'Address';\n\n    const address = document.getElementById('restaurant-address');\n    address.textContent = restaurant.address;\n\n    const saveButton = document.getElementById('save');\n    saveButton.setAttribute('data-restaurant-id', restaurant.id);\n    saveButton.setAttribute('aria-pressed', restaurant.is_favorite);\n\n    const image = document.getElementById('restaurant-img');\n    image.setAttribute('alt', restaurant.name);\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\n    image.sizes = '100vw';\n    image.srcset = DBHelper.srcsetForRestaurant(restaurant);\n\n    const cuisineTitle = document.getElementById('cuisine-title');\n    cuisineTitle.textContent = 'Cuisine';\n\n    const cuisine = document.getElementById('restaurant-cuisine');\n    cuisine.textContent = restaurant.cuisine_type;\n\n    // fill operating hours\n    if (restaurant.operating_hours) {\n        const hourTitle = document.getElementById('hours-title');\n        hourTitle.textContent = 'Operating Hours';\n\n        fillRestaurantHoursHTML();\n    }\n    // fill reviews\n    fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n    const hours = document.getElementById('restaurant-hours');\n\n    for (let key in operatingHours) {\n        const row = document.createElement('tr');\n\n        const day = document.createElement('td');\n        day.textContent = key;\n        day.className = 'day';\n        row.appendChild(day);\n\n        const time = document.createElement('td');\n        time.textContent = operatingHours[key];\n        time.className = 'time';\n        row.appendChild(time);\n\n        hours.appendChild(row);\n    }\n};\n\n/**\n * Fetch reviews from Database or network\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = () => {\n    const container = document.getElementById('reviews-container');\n    const title = document.createElement('h4');\n    title.className = 'review-section-title';\n    title.textContent = 'Reviews';\n    container.appendChild(title);\n    console.log(restaurant.id);\n\n    // Fetch all restaurant reviews and append to page\n    return DBHelper.fetchReviewsById(restaurant.id)\n    .then((reviews) => {\n\n        if (reviews.length === 0) {\n            const noReviews = document.createElement('p');\n            noReviews.textContent = 'No reviews yet!';\n            container.appendChild(noReviews);\n            return;\n        }\n\n        const ul = document.getElementById('reviews-list');\n        ul.innerHTML = reviews.map(review => createReviewHTML(review)).join('');\n        container.appendChild(ul);\n\n\n    })\n    .catch(DBHelper.logError);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n    const dateOptions = { year: 'numeric', month: 'long', day: 'numeric' };\n    const date = new Date(review.createdAt).toLocaleString('en-US', dateOptions);\n    console.log(date);\n\n    const reviewHTML =\n    `<li class=\"reviews-list-item\">\n        <div class=\"name-container\">\n            <p>${review.name}</p>\n            <p class=\"review-date\">${date}</p>\n        </div>\n        <p class=\"rating\">Rating: ${review.rating}</p>\n        <p class=\"comments\">${review.comments}</p>\n    </li>`;\n\n    return reviewHTML;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\n\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n    const breadcrumb = document.getElementById('breadcrumb');\n    const li = document.createElement('li');\n    li.textContent = restaurant.name;\n    breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n    if (!url)\n        url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n        results = regex.exec(url);\n    if (!results)\n        return null;\n    if (!results[2])\n        return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};"]}