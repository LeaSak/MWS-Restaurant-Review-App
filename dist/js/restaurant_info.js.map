{"version":3,"sources":["restaurant_info.js"],"names":["document","addEventListener","event","fetchRestaurantFromURL","DBHelper","toggleMap","window","initMap","restaurant","arguments","length","undefined","self","map","google","maps","Map","getElementById","zoom","center","latlng","mapMarkerForRestaurant","addListener","setTitle","querySelector","id","getParameterByName","then","fillRestaurantHTML","fillBreadcrumb","catch","logError","textContent","name","address","image","setAttribute","src","imageUrlForRestaurant","sizes","srcset","srcsetForRestaurant","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","row","createElement","day","key","appendChild","time","reviews","container","title","className","noReviews","createReviewHTML","review","join","ul","reviewHTML","date","comments","breadcrumb","li","url","replace","href","regex","RegExp","results","exec","decodeURIComponent"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["\n\ndocument.addEventListener('DOMContentLoaded', (event) => {\n    fetchRestaurantFromURL();\n    DBHelper.toggleMap('map-anchor', 'map-section');\n});\n\n\n/**\n * Initialize Google map\n */\nwindow.initMap = (restaurant = self.restaurant) => {\n    self.map = new google.maps.Map(document.getElementById('map'), {\n                zoom: 16,\n                center: restaurant.latlng,\n                scrollwheel: false\n            });\n            \n            //fillBreadcrumb();\n            \n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n            \n            let setTitle = () => {\n                const iFrame = document.querySelector('#map iframe');\n                iFrame.setAttribute('title', 'Map with selected restaurant marker');\n            }\n            self.map.addListener('tilesloaded', setTitle);\n};\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = () => {\n    if (self.restaurant) {\n        return self.restaurant;\n    }\n\n    const id = getParameterByName('id');\n    return DBHelper.fetchRestaurantById(id)\n        .then((restaurant) => {\n                self.restaurant = restaurant;\n                fillRestaurantHTML();\n                return restaurant;\n    })\n    .then((restaurant) => {\n        fillBreadcrumb(restaurant)\n        return restaurant;\n    })\n    .catch(DBHelper.logError);\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n    const name = document.getElementById('restaurant-name');\n    name.textContent = restaurant.name;\n\n    const addressTitle = document.getElementById('address-title');\n    addressTitle.textContent = 'Address';\n\n    const address = document.getElementById('restaurant-address');\n    address.textContent = restaurant.address;\n\n    const image = document.getElementById('restaurant-img');\n    image.setAttribute('alt', restaurant.name);\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\n    image.sizes = '100vw';\n    image.srcset = DBHelper.srcsetForRestaurant(restaurant);\n\n    const cuisineTitle = document.getElementById('cuisine-title');\n    cuisineTitle.textContent = 'Cuisine';\n\n    const cuisine = document.getElementById('restaurant-cuisine');\n    cuisine.textContent = restaurant.cuisine_type;\n\n    // fill operating hours\n    if (restaurant.operating_hours) {\n        const hourTitle = document.getElementById('hours-title');\n        hourTitle.textContent = 'Operating Hours';\n\n        fillRestaurantHoursHTML();\n    }\n    // fill reviews\n    fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n    const hours = document.getElementById('restaurant-hours');\n\n    for (let key in operatingHours) {\n        const row = document.createElement('tr');\n\n        const day = document.createElement('td');\n        day.textContent = key;\n        day.className = 'day';\n        row.appendChild(day);\n\n        const time = document.createElement('td');\n        time.textContent = operatingHours[key];\n        time.className = 'time';\n        row.appendChild(time);\n\n        hours.appendChild(row);\n    }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n    const container = document.getElementById('reviews-container');\n    const title = document.createElement('h2');\n    title.className = 'review-section-title';\n    title.textContent = 'Reviews';\n    container.appendChild(title);\n\n    if (!reviews) {\n        const noReviews = document.createElement('p');\n        noReviews.textContent = 'No reviews yet!';\n        container.appendChild(noReviews);\n        return;\n    }\n    const ul = document.getElementById('reviews-list');\n    ul.innerHTML = reviews.map(review => createReviewHTML(review)).join('');\n    container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n    const reviewHTML = \n    `<li class=\"reviews-list-item\">\n        <div class=\"name-container\">\n            <p>${review.name}</p>\n            <p class=\"review-date\">${review.date}</p>\n        </div>\n        <p class=\"rating\">Rating: ${review.rating}</p>\n        <p class=\"comments\">${review.comments}</p>\n    </li>`;\n    return reviewHTML;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\n\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n    const breadcrumb = document.getElementById('breadcrumb');\n    const li = document.createElement('li');\n    li.textContent = restaurant.name;\n    breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n    if (!url)\n        url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n        results = regex.exec(url);\n    if (!results)\n        return null;\n    if (!results[2])\n        return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};"]}