{"version":3,"sources":["restaurant_info.js"],"names":["document","addEventListener","event","fetchRestaurantFromURL","DBHelper","toggleMap","window","initMap","restaurant","arguments","length","undefined","self","map","google","maps","Map","getElementById","zoom","center","latlng","mapMarkerForRestaurant","addListener","setTitle","querySelector","id","getParameterByName","then","log","fillRestaurantHTML","fillBreadcrumb","catch","logError","textContent","name","address","image","setAttribute","src","imageUrlForRestaurant","sizes","srcset","srcsetForRestaurant","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","row","createElement","day","key","appendChild","time","container","title","className","fetchReviewsById","reviews","noReviews","ul","innerHTML","createReviewHTML","review","join","reviewHTML","createdAt","rating","comments","breadcrumb","li","url","location","href","replace","results","RegExp","exec","decodeURIComponent"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["\n\ndocument.addEventListener('DOMContentLoaded', (event) => {\n    fetchRestaurantFromURL();\n    DBHelper.toggleMap('map-anchor', 'map-section');\n});\n\n\n/**\n * Initialize Google map\n */\nwindow.initMap = (restaurant = self.restaurant) => {\n    self.map = new google.maps.Map(document.getElementById('map'), {\n                zoom: 16,\n                center: restaurant.latlng,\n                scrollwheel: false\n            });\n\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n\n            let setTitle = () => {\n                const iFrame = document.querySelector('#map iframe');\n                iFrame.setAttribute('title', 'Map with selected restaurant marker');\n            }\n            self.map.addListener('tilesloaded', setTitle);\n};\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = () => {\n    if (self.restaurant) {\n        return self.restaurant;\n    }\n\n    const id = getParameterByName('id');\n    return DBHelper.fetchRestaurantById(id)\n    .then((restaurant) => {\n                self.restaurant = restaurant;\n                console.log(restaurant);\n                fillRestaurantHTML();\n                return restaurant;\n    })\n    .then((restaurant) => {\n        fillBreadcrumb(restaurant)\n        return restaurant;\n    })\n    .catch(DBHelper.logError);\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n    const name = document.getElementById('restaurant-name');\n    name.textContent = restaurant.name;\n\n    const addressTitle = document.getElementById('address-title');\n    addressTitle.textContent = 'Address';\n\n    const address = document.getElementById('restaurant-address');\n    address.textContent = restaurant.address;\n\n    const image = document.getElementById('restaurant-img');\n    image.setAttribute('alt', restaurant.name);\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\n    image.sizes = '100vw';\n    image.srcset = DBHelper.srcsetForRestaurant(restaurant);\n\n    const cuisineTitle = document.getElementById('cuisine-title');\n    cuisineTitle.textContent = 'Cuisine';\n\n    const cuisine = document.getElementById('restaurant-cuisine');\n    cuisine.textContent = restaurant.cuisine_type;\n\n    // fill operating hours\n    if (restaurant.operating_hours) {\n        const hourTitle = document.getElementById('hours-title');\n        hourTitle.textContent = 'Operating Hours';\n\n        fillRestaurantHoursHTML();\n    }\n    // fill reviews\n    fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n    const hours = document.getElementById('restaurant-hours');\n\n    for (let key in operatingHours) {\n        const row = document.createElement('tr');\n\n        const day = document.createElement('td');\n        day.textContent = key;\n        day.className = 'day';\n        row.appendChild(day);\n\n        const time = document.createElement('td');\n        time.textContent = operatingHours[key];\n        time.className = 'time';\n        row.appendChild(time);\n\n        hours.appendChild(row);\n    }\n};\n\n/**\n * Fetch reviews from Database or network\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = () => {\n    const container = document.getElementById('reviews-container');\n    const title = document.createElement('h4');\n    title.className = 'review-section-title';\n    title.textContent = 'Reviews';\n    container.appendChild(title);\n    console.log(restaurant.id);\n\n    // Fetch all restaurant reviews and append to page\n    return DBHelper.fetchReviewsById(restaurant.id)\n    .then((reviews) => {\n\n        if (reviews.length === 0) {\n            const noReviews = document.createElement('p');\n            noReviews.textContent = 'No reviews yet!';\n            container.appendChild(noReviews);\n            return;\n        }\n\n        const ul = document.getElementById('reviews-list');\n        ul.innerHTML = reviews.map(review => createReviewHTML(review)).join('');\n        container.appendChild(ul);\n\n\n    })\n    .catch(DBHelper.logError);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n    const reviewHTML =\n    `<li class=\"reviews-list-item\">\n        <div class=\"name-container\">\n            <p>${review.name}</p>\n            <p class=\"review-date\">${review.createdAt}</p>\n        </div>\n        <p class=\"rating\">Rating: ${review.rating}</p>\n        <p class=\"comments\">${review.comments}</p>\n    </li>`;\n    return reviewHTML;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\n\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n    const breadcrumb = document.getElementById('breadcrumb');\n    const li = document.createElement('li');\n    li.textContent = restaurant.name;\n    breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n    if (!url)\n        url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n        results = regex.exec(url);\n    if (!results)\n        return null;\n    if (!results[2])\n        return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};"]}