{"version":3,"sources":["restaurant_info.js"],"names":["map","restaurant","window","initMap","fetchRestaurantFromURL","error","console","maps","Map","document","getElementById","zoom","setTitle","latlng","scrollwheel","self","center","querySelector","setAttribute","callback","DBHelper","fetchRestaurantById","id","getParameterByName","fillRestaurantHTML","arguments","length","undefined","innerHTML","name","address","image","alt","addressTitle","srcsetForRestaurant","src","imageUrlForRestaurant","cuisineTitle","fillRestaurantHoursHTML","fillReviewsHTML","hours","key","operatingHours","day","createElement","className","row","appendChild","time","reviews","title","container","noReviews","ul","review","li","createReviewHTML","nameBox","date","rating","comments","breadcrumb","url","location","href","fillBreadcrumb","results","RegExp","exec","decodeURIComponent","replace"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nvar map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n    fetchRestaurantFromURL((error, restaurant) => {\n        if (error) { // Got an error!\n            console.error(error);\n        } else {\n            let setTitle = () => document.querySelector('#map iframe').setAttribute('title', 'Map with restaurant marker');\n            self.map = new google.maps.Map(document.getElementById('map'), {\n                zoom: 16,\n                center: restaurant.latlng,\n                scrollwheel: false\n            });\n            fillBreadcrumb();\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n            self.map.addListener('tilesloaded', setTitle);\n        }\n    });\n}\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n    if (self.restaurant) { // restaurant already fetched!\n        callback(null, self.restaurant)\n        return;\n    }\n    const id = getParameterByName('id');\n    if (!id) { // no id found in URL\n        error = 'No restaurant id in URL'\n        callback(error, null);\n    } else {\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n            self.restaurant = restaurant;\n            if (!restaurant) {\n                console.error(error);\n                return;\n            }\n            fillRestaurantHTML();\n            callback(null, restaurant)\n        });\n    }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n    const name = document.getElementById('restaurant-name');\n    name.innerHTML = restaurant.name;\n\n    const addressTitle = document.getElementById('address-title');\n    addressTitle.innerHTML = 'Address';\n\n    const address = document.getElementById('restaurant-address');\n    address.innerHTML = restaurant.address;\n\n    const image = document.getElementById('restaurant-img');\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\n    image.setAttribute('alt', restaurant.alt);\n    image.sizes = '100vw';\n    image.srcset = DBHelper.srcsetForRestaurant(restaurant);\n\n    const cuisineTitle = document.getElementById('cuisine-title');\n    cuisineTitle.innerHTML = 'Cuisine';\n\n    const cuisine = document.getElementById('restaurant-cuisine');\n    cuisine.innerHTML = restaurant.cuisine_type;\n\n    // fill operating hours\n    if (restaurant.operating_hours) {\n        const hourTitle = document.getElementById('hours-title');\n        hourTitle.innerHTML = 'Operating Hours';\n        \n        fillRestaurantHoursHTML();\n    }\n    // fill reviews\n    fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n    const hours = document.getElementById('restaurant-hours');\n    for (let key in operatingHours) {\n        const row = document.createElement('tr');\n\n        const day = document.createElement('td');\n        day.innerHTML = key;\n        day.className = 'day';\n        row.appendChild(day);\n\n        const time = document.createElement('td');\n        time.innerHTML = operatingHours[key];\n        time.className = 'time';\n        row.appendChild(time);\n\n        hours.appendChild(row);\n    }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n    const container = document.getElementById('reviews-container');\n    const title = document.createElement('h2');\n    title.className = 'review-section-title';\n    title.innerHTML = 'Reviews';\n    container.appendChild(title);\n\n    if (!reviews) {\n        const noReviews = document.createElement('p');\n        noReviews.innerHTML = 'No reviews yet!';\n        container.appendChild(noReviews);\n        return;\n    }\n    const ul = document.getElementById('reviews-list');\n    reviews.forEach(review => {\n        ul.appendChild(createReviewHTML(review));\n    });\n    container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n    const li = document.createElement('li');\n    li.className = 'reviews-list-item';\n    \n    const nameBox = document.createElement('div');\n    nameBox.className = 'name-container';\n\n    const name = document.createElement('p');\n    name.innerHTML = review.name;\n    li.appendChild(nameBox);\n    nameBox.appendChild(name);\n\n    const date = document.createElement('p');\n    date.innerHTML = review.date;\n    date.className = 'review-date';\n    nameBox.appendChild(date);\n\n    const rating = document.createElement('p');\n    rating.innerHTML = `Rating: ${review.rating}`;\n    rating.className = 'rating';\n    li.appendChild(rating);\n\n    const comments = document.createElement('p');\n    comments.innerHTML = review.comments;\n    comments.className = 'comments';\n    li.appendChild(comments);\n\n    return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n    const breadcrumb = document.getElementById('breadcrumb');\n    const li = document.createElement('li');\n    li.innerHTML = restaurant.name;\n    breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n    if (!url)\n        url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n        results = regex.exec(url);\n    if (!results)\n        return null;\n    if (!results[2])\n        return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}"]}