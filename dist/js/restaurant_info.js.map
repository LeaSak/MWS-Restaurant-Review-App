{"version":3,"sources":["restaurant_info.js"],"names":["window","initMap","fetchRestaurantFromURL","error","restaurant","self","map","iFrame","document","querySelector","getElementById","center","latlng","google","scrollwheel","addListener","setAttribute","callback","id","getParameterByName","DBHelper","fetchRestaurantById","fillRestaurantHTML","arguments","length","undefined","innerHTML","name","image","addressTitle","alt","sizes","address","cuisine_type","cuisineTitle","cuisine","fillReviewsHTML","fillRestaurantHoursHTML","operatingHours","operating_hours","key","row","createElement","day","appendChild","time","reviews","container","hours","title","className","noReviews","review","createReviewHTML","ul","nameBox","li","date","rating","comments","fillBreadcrumb","breadcrumb","url","location","href","replace","results","decodeURIComponent"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n    fetchRestaurantFromURL((error, restaurant) => {\n        if (error) { // Got an error!\n            console.error(error);\n        } else {\n            let setTitle = () => {\n                const iFrame = document.querySelector('#map iframe');\n                iFrame.setAttribute('title', 'Map with selected restaurant marker');\n            }\n            self.map = new google.maps.Map(document.getElementById('map'), {\n                zoom: 16,\n                center: restaurant.latlng,\n                scrollwheel: false\n            });\n            fillBreadcrumb();\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n            self.map.addListener('tilesloaded', setTitle);\n        }\n    });\n};\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n    if (self.restaurant) { // restaurant already fetched!\n        callback(null, self.restaurant);\n        return;\n    }\n    const id = getParameterByName('id');\n    if (!id) { // no id found in URL\n        let error = 'No restaurant id in URL';\n        callback(error, null);\n    } else {\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n            self.restaurant = restaurant;\n            if (!restaurant) {\n                console.error(error);\n                return;\n            }\n            fillRestaurantHTML();\n            callback(null, restaurant);\n        });\n    }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n    const name = document.getElementById('restaurant-name');\n    name.innerHTML = restaurant.name;\n\n    const addressTitle = document.getElementById('address-title');\n    addressTitle.innerHTML = 'Address';\n\n    const address = document.getElementById('restaurant-address');\n    address.innerHTML = restaurant.address;\n\n    const image = document.getElementById('restaurant-img');\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\n    image.setAttribute('alt', restaurant.alt);\n    image.sizes = '100vw';\n    image.srcset = DBHelper.srcsetForRestaurant(restaurant);\n\n    const cuisineTitle = document.getElementById('cuisine-title');\n    cuisineTitle.innerHTML = 'Cuisine';\n\n    const cuisine = document.getElementById('restaurant-cuisine');\n    cuisine.innerHTML = restaurant.cuisine_type;\n\n    // fill operating hours\n    if (restaurant.operating_hours) {\n        const hourTitle = document.getElementById('hours-title');\n        hourTitle.innerHTML = 'Operating Hours';\n\n        fillRestaurantHoursHTML();\n    }\n    // fill reviews\n    fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n    const hours = document.getElementById('restaurant-hours');\n\n    for (let key in operatingHours) {\n        const row = document.createElement('tr');\n\n        const day = document.createElement('td');\n        day.innerHTML = key;\n        day.className = 'day';\n        row.appendChild(day);\n\n        const time = document.createElement('td');\n        time.innerHTML = operatingHours[key];\n        time.className = 'time';\n        row.appendChild(time);\n\n        hours.appendChild(row);\n    }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n    const container = document.getElementById('reviews-container');\n    const title = document.createElement('h2');\n    title.className = 'review-section-title';\n    title.innerHTML = 'Reviews';\n    container.appendChild(title);\n\n    if (!reviews) {\n        const noReviews = document.createElement('p');\n        noReviews.innerHTML = 'No reviews yet!';\n        container.appendChild(noReviews);\n        return;\n    }\n    const ul = document.getElementById('reviews-list');\n    reviews.forEach(review => {\n        ul.appendChild(createReviewHTML(review));\n    });\n    container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n    const li = document.createElement('li');\n    li.className = 'reviews-list-item';\n\n    const nameBox = document.createElement('div');\n    nameBox.className = 'name-container';\n\n    const name = document.createElement('p');\n    name.innerHTML = review.name;\n    li.appendChild(nameBox);\n    nameBox.appendChild(name);\n\n    const date = document.createElement('p');\n    date.innerHTML = review.date;\n    date.className = 'review-date';\n    nameBox.appendChild(date);\n\n    const rating = document.createElement('p');\n    rating.innerHTML = `Rating: ${review.rating}`;\n    rating.className = 'rating';\n    li.appendChild(rating);\n\n    const comments = document.createElement('p');\n    comments.innerHTML = review.comments;\n    comments.className = 'comments';\n    li.appendChild(comments);\n\n    return li;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n    const breadcrumb = document.getElementById('breadcrumb');\n    const li = document.createElement('li');\n    li.innerHTML = restaurant.name;\n    breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n    if (!url)\n        url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n        results = regex.exec(url);\n    if (!results)\n        return null;\n    if (!results[2])\n        return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};"]}