{"version":3,"sources":["restaurant_info.js"],"names":["window","initMap","fetchRestaurantFromURL","error","restaurant","console","maps","Map","document","getElementById","zoom","setTitle","latlng","scrollwheel","self","map","center","querySelector","setAttribute","callback","DBHelper","fetchRestaurantById","id","getParameterByName","fillRestaurantHTML","arguments","length","undefined","innerHTML","name","address","image","alt","addressTitle","srcsetForRestaurant","src","imageUrlForRestaurant","cuisineTitle","fillRestaurantHoursHTML","fillReviewsHTML","hours","row","createElement","day","key","className","time","appendChild","operatingHours","reviews","title","container","noReviews","ul","review","li","createReviewHTML","nameBox","date","rating","comments","breadcrumb","url","location","href","fillBreadcrumb","results","RegExp","exec","decodeURIComponent","replace"],"mappings":"aAGAA,OAAOC,QAAU,WACbC,uBAAuB,SAACC,EAAOC,GAD5BH,GAAAA,EACHC,QAAAA,MAAAA,OACQC,CACAE,KAAAA,IAAQF,IAAMA,OAAdG,KAAAC,IAAAC,SAAAC,eAAA,QACGC,KAAA,GACCC,OAAAA,EAAWC,OAAAC,aAAML,IACrBM,iBACIJ,SAAAA,uBAD2DI,KAAAV,WAAAU,KAAAC,KAE3DC,KAAAA,IAAAA,YAAQZ,cANH,WAAA,OAAAI,SAAAS,cAAA,eAAAC,aAAA,QAAA,oCAcpB,IAhBDhB,uBAAA,SAAAiB,GAsBI,GAAIL,KAAKV,WAJbe,EAAA,KAAAL,KAAAV,gBAII,CADEF,IAAAA,EAAAA,mBAAyB,MAC3B,GAAIY,EAGHM,SAAAC,oBAAAC,EAAA,SAAAnB,EAAAC,IACKkB,KAAKC,WAAAA,IAIJC,qBACHJ,EAASC,KAAAA,IAJFhB,QAAAF,MAAAA,SALFC,CACLe,EADmB,0BACJL,SAgBdU,mBARD,WAAA,IAAApB,EAAA,EAAAqB,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAAX,KAAAV,WASHI,SAAAC,eAAA,mBAnBLmB,UAAAxB,EAAAyB,KAsBArB,SAAAC,eAAA,iBAQiBmB,UAAY,UALvBJ,SAAqBf,eAArBe,sBAAsBpB,UAAiCA,EAAA0B,QACzD,IAAMD,EAAOrB,SAASC,eAAe,mBACrCoB,EAAKD,IAAAA,SAAYxB,sBAAjBA,GAUA2B,EAAMb,aAAa,MAAOd,EAAW4B,KARrCD,EAAME,MAAAA,QACNA,EAAAA,OAAaL,SAAbM,oBAAA9B,GAEgBI,SAASC,eAAe,iBAChCmB,UAAYxB,UAENI,SAASC,eAAe,sBAChC0B,UAAMf,EAASgB,aAGrBL,EAAeX,mBAUOZ,SAASC,eAAe,eARxC4B,UAAe7B,kBAWjB8B,2BAGJC,mBAHID,wBAAAA,WAAAA,IAAAA,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAAA,KAAAA,WAAAA,gBACHE,EAAAhC,SAAAC,eAAA,oBAED8B,IAAAA,IAAAA,KAAAA,EAAAA,CA9BJ,IAAAE,EAAAjC,SAAAkC,cAAA,MAiCAC,EAAAnC,SAAAkC,cAAA,MAUQC,EAAIf,UAAYgB,EAChBD,EAAIE,UAAY,MARlBP,EAAAA,YAAAA,GAWE,IAAMQ,EAAOtC,SAASkC,cAAc,MAVlCF,EAAAA,UAAiB/B,EAAemC,GAYlCE,EAAKD,UAAY,OAVjBJ,EAAKM,YAAWC,GAahBR,EAAMO,YAAYN,KAJlBK,gBAAA,WAAA,IAAiBE,EAAjB,EAAAvB,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAiBuB,KAAeJ,WAAhCK,QACAH,EAAAtC,SAAAC,eAAA,qBACAgC,EAAIM,SAAYD,cAAhB,MAgBJ,GAJAI,EAAML,UAAY,uBAVdL,EAAAA,UAAMO,UACTI,EAAAJ,YAAAG,IAaID,EAAS,CAVlB,IAAAG,EAAA5C,SAAAkC,cAAA,KAGMH,OASEa,EAAUxB,UAAY,uBACtBuB,EAAUJ,YAAYK,GAG1B,IAAMC,EAAK7C,SAASC,eAAe,gBAZnCwC,EAAME,QAAY3C,SAAAA,GACZ0C,EAAAA,YAAQ1C,iBAAuB8C,MAErCJ,EAAMtB,YAAYyB,IAMdF,iBAAUJ,SAAAA,GACV,IAAAQ,EAAA/C,SAAAkC,cAAA,MACHa,EAAAV,UAAA,oBAEDI,IAAAA,EAAgBzC,SAAAkC,cAAU,OACtBW,EAAGN,UAAYS,iBAEnBL,IAAAA,EAAUJ,SAAYM,cAAtB,KAjBJxB,EAAAD,UAAA0B,EAAAzB,KAgCI0B,EAAGR,YAAYU,GAZnBA,EAAAV,YAAAlB,GAeI,IAAM6B,EAAOlD,SAASkC,cAAc,KAZlCc,EAAAA,UAAAA,EAAmBE,KACrBA,EAAMH,UAAK/C,cACX+C,EAAGV,YAAYa,GAEf,IAAMD,EAAUjD,SAASkC,cAAc,KACvCe,EAAAA,UAAAA,WAAoBH,EAApBK,OAcAA,EAAOd,UAAY,SAZnBU,EAAAR,YAAavC,GAEb+C,IAAGR,EAAYU,SAAff,cAAA,KAKAgB,OAJAD,EAAQV,UAAYlB,EAApB+B,SAcAA,EAASf,UAAY,WAZrBU,EAAAR,YAAavC,GAERqC,GAMLU,eAAeI,WAAf,IAAeA,EAAf,EAAAlC,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAAX,KAAAV,WAcMyD,EAAarD,SAASC,eAAe,cAZrCmD,EAAAA,SAAWpD,cAASkC,MAC1BkB,EAAAA,UAAShC,EAAY0B,KACrBM,EAASf,YAAYU,IAMzBhC,mBAAA,SAAAM,EAAAiC,GAcSA,IACDA,EAAM9D,OAAO+D,SAASC,MAZxBC,EAAAA,EAAAA,QAAiB,UAAjBA,QAAmD,IAejDC,EAfiD,IAAAC,OAAA,OAAAtC,EAAA,qBAejCuC,KAAKN,GAdzB,OAAMD,EAEHjC,EAAH,GAHJyC,mBAAAH,EAAA,GAAAI,QAAA,MAAA,MAIevB,GAFAvC","file":"restaurant_info.js","sourcesContent":["/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n    fetchRestaurantFromURL((error, restaurant) => {\n        if (error) { // Got an error!\n            console.error(error);\n        } else {\n            let setTitle = () => document.querySelector('#map iframe').setAttribute('title', 'Map with restaurant marker');\n            self.map = new google.maps.Map(document.getElementById('map'), {\n                zoom: 16,\n                center: restaurant.latlng,\n                scrollwheel: false\n            });\n            fillBreadcrumb();\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n            self.map.addListener('tilesloaded', setTitle);\n        }\n    });\n};\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n    if (self.restaurant) { // restaurant already fetched!\n        callback(null, self.restaurant);\n        return;\n    }\n    const id = getParameterByName('id');\n    if (!id) { // no id found in URL\n        let error = 'No restaurant id in URL';\n        callback(error, null);\n    } else {\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n            self.restaurant = restaurant;\n            if (!restaurant) {\n                console.error(error);\n                return;\n            }\n            fillRestaurantHTML();\n            callback(null, restaurant);\n        });\n    }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n    const name = document.getElementById('restaurant-name');\n    name.innerHTML = restaurant.name;\n\n    const addressTitle = document.getElementById('address-title');\n    addressTitle.innerHTML = 'Address';\n\n    const address = document.getElementById('restaurant-address');\n    address.innerHTML = restaurant.address;\n\n    const image = document.getElementById('restaurant-img');\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\n    image.setAttribute('alt', restaurant.alt);\n    image.sizes = '100vw';\n    image.srcset = DBHelper.srcsetForRestaurant(restaurant);\n\n    const cuisineTitle = document.getElementById('cuisine-title');\n    cuisineTitle.innerHTML = 'Cuisine';\n\n    const cuisine = document.getElementById('restaurant-cuisine');\n    cuisine.innerHTML = restaurant.cuisine_type;\n\n    // fill operating hours\n    if (restaurant.operating_hours) {\n        const hourTitle = document.getElementById('hours-title');\n        hourTitle.innerHTML = 'Operating Hours';\n        \n        fillRestaurantHoursHTML();\n    }\n    // fill reviews\n    fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n    const hours = document.getElementById('restaurant-hours');\n    \n        for (let key in operatingHours) {\n        const row = document.createElement('tr');\n\n        const day = document.createElement('td');\n        day.innerHTML = key;\n        day.className = 'day';\n        row.appendChild(day);\n\n        const time = document.createElement('td');\n        time.innerHTML = operatingHours[key];\n        time.className = 'time';\n        row.appendChild(time);\n\n        hours.appendChild(row);\n    }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n    const container = document.getElementById('reviews-container');\n    const title = document.createElement('h2');\n    title.className = 'review-section-title';\n    title.innerHTML = 'Reviews';\n    container.appendChild(title);\n\n    if (!reviews) {\n        const noReviews = document.createElement('p');\n        noReviews.innerHTML = 'No reviews yet!';\n        container.appendChild(noReviews);\n        return;\n    }\n    const ul = document.getElementById('reviews-list');\n    reviews.forEach(review => {\n        ul.appendChild(createReviewHTML(review));\n    });\n    container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n    const li = document.createElement('li');\n    li.className = 'reviews-list-item';\n    \n    const nameBox = document.createElement('div');\n    nameBox.className = 'name-container';\n\n    const name = document.createElement('p');\n    name.innerHTML = review.name;\n    li.appendChild(nameBox);\n    nameBox.appendChild(name);\n\n    const date = document.createElement('p');\n    date.innerHTML = review.date;\n    date.className = 'review-date';\n    nameBox.appendChild(date);\n\n    const rating = document.createElement('p');\n    rating.innerHTML = `Rating: ${review.rating}`;\n    rating.className = 'rating';\n    li.appendChild(rating);\n\n    const comments = document.createElement('p');\n    comments.innerHTML = review.comments;\n    comments.className = 'comments';\n    li.appendChild(comments);\n\n    return li;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n    const breadcrumb = document.getElementById('breadcrumb');\n    const li = document.createElement('li');\n    li.innerHTML = restaurant.name;\n    breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n    if (!url)\n        url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n        results = regex.exec(url);\n    if (!results)\n        return null;\n    if (!results[2])\n        return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};"]}