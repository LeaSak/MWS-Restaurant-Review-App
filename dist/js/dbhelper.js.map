{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","fetch","DATABASE_URL","then","response","statusText","json","restaurants","console","catch","error","log","id","fetchRestaurants","restaurant","find","r","cuisine","filter","cuisine_type","neighborhood","results","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP"],"mappings":"iYAGMA,8HAcE,OAAOC,MAAMD,EAASE,cAAcC,KAAK,SAAAC,GAAzC,IAAAA,EAAaJ,GACT,MAAKI,MAAAA,EAAaC,YAEjB,OAAAD,EAAAE,SACGH,KAAA,SAAAC,GACDD,IAAKI,EAAAH,EAEJI,OADAA,QAAMD,IAAAA,GACNC,IAPDC,MAAA,SAAAC,GAWDF,QAAAA,IAAQG,iDASSC,GAEvB,OAAOZ,EAASa,mBACfV,KAAK,SAAAC,GAFN,IAAAU,EAAAV,EAAAW,KAAA,SAAAC,GAAA,OAAAA,EAAAJ,IAAAA,IACA,GAAAE,EAEE,OAAAA,IACAL,MAAA,SAAAC,GACEF,QAAAG,IAAA,4BAAAD,sDAQRO,GAKIjB,EAASa,mBACRV,KAAK,SAAAI,GAGJ,OADgBA,EAAYW,OAAO,SAAAF,GAAA,OAAKA,EAAEG,cAAgBF,MAH5DjB,MAAAA,SAAAA,GAEEQ,QAAAG,IAAAD,2DAFFU,GAgBApB,EAASa,mBALbV,KAAA,SAAAW,GASM,OADgBP,YAAYW,OAAO,SAAAF,GAAA,OAAKA,EAAEI,cAAgBA,MAG3DV,MAAM,SAAAA,GACLF,QAAQG,IAAID,qEAHZO,EAAAG,GAGAZ,OAAAA,EAAQG,mBACTR,KARD,SAAAI,GASH,IAAAc,EAAAd,EAgBO,MANe,OAAXU,IARZI,EAAAA,EAAAH,OAAA,SAAAF,GAAA,OAAAA,EAAAG,cAAAF,KAW4B,OAAhBG,IACAC,EAAUA,EAAQH,OAAO,SAAAF,GAAA,OAAKA,EAAEI,cAAgBA,KAE7CC,IAVXZ,MAAA,SAAAC,GACAF,QAAAG,IAAOX,kDAM0B,OAAAA,EAAAa,mBACzBQ,KAAAA,SAAAA,GAAyB,IAAAC,EAAzBf,EAAAgB,IAAA,SAAAC,EAAAC,GAAA,OAAAlB,EAAAkB,GAAAL,eAEJM,EAAAJ,EAAAJ,OAAA,SAAAM,EAAAC,GAAA,OAAAH,EAAAK,QAAAH,IAAAC,IAGFjB,OAFDA,QACAC,IAAMiB,GACLlB,IAELC,MAAA,SAAAC,GAiBKF,QAAQG,IAAID,6CAVd,OAAAV,EAAOA,mBAELG,KAAA,SAAAI,GACsC,IAAAqB,EAAUrB,EAAYkB,IAAGL,SAAAA,EAAAA,GAAAA,OAAAA,EAAzBK,GAAAN,eAEtC,OADAS,EAAAV,OAAA,SAAAM,EAAAC,GAAA,OAAAG,EAAAD,QAAAH,IAAAC,MACiDhB,MAAA,SAAAC,GACjDF,QAAAA,IAAAA,8CAQNM,GAsBI,MAAA,wBAAgCA,EAAWF,iDAlB3CE,GACA,MAAA,OAAOd,EAASa,GAAhB,wDAKQgB,GAAiC,MAAA,OAAAf,EAAUc,GAAV,+BAAAd,EAAvCF,GAAuC,+BACvCE,EAAOe,GADgC,8BAExCf,EACMF,GAHkC,gCAIvCJ,EAAAA,GAJuC,gCAKxCM,EAVDF,GAKyC,kEAqCfE,EAAYS,GAQtC,OAPe,IAAIO,OAAOC,KAAKC,QAC3BC,SAAUnB,EAAWoB,OACrBC,MAAOrB,EAAWsB,KA5BtBC,IAAArC,EAAAsC,iBAAAxB,GACHS,IAAAA,EA8BOgB,UAAWT,OAAOC,KAAKS,UAAUC,4CArKrC,MAAA","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        const port = 1337; // Change this to your server port\r\n        return `http://localhost:${port}/restaurants`;\r\n    }\r\n\r\n    \r\n  static fetchRestaurants() {\r\n\r\n        return fetch(DBHelper.DATABASE_URL).then(response => {\r\n            if (!response.ok) {\r\n                throw Error(response.statusText);\r\n            }\r\n                return response.json();\r\n            }).then(response => {\r\n                const restaurants = response;\r\n                console.log(restaurants);\r\n                return restaurants;\r\n            })\r\n            .catch( error => {\r\n              console.log(error);\r\n                /*const errorMsg = ('Oops!. Got an error from server', error);\r\n                return callback(errorMsg, null);*/\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id) {\r\n        // fetch all restaurants with proper error handling.\r\n        return DBHelper.fetchRestaurants()\r\n        .then(response => {\r\n          const restaurant = response.find(r => r.id == id);\r\n          if(restaurant){\r\n            return restaurant;\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.log('Restaurant does not exist', error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants()\r\n        .then(restaurants => {\r\n          // Filter restaurants to have only given cuisine type\r\n          const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n          return results;\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants()\r\n        .then(restaurant => {\r\n          // Filter restaurants to have only given neighborhood\r\n          const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n          return results;\r\n        })\r\n        .error(error => {\r\n          console.log(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood) {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n        .then(restaurants => {\r\n            let results = restaurants;\r\n            if (cuisine != 'all') { // filter by cuisine\r\n                results = results.filter(r => r.cuisine_type == cuisine);\r\n            }\r\n            if (neighborhood != 'all') { // filter by neighborhood\r\n                results = results.filter(r => r.neighborhood == neighborhood);\r\n            }\r\n            return results;\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods() {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n        .then(restaurants => {\r\n          // Get all neighborhoods from all restaurants\r\n          const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n          // Remove duplicates from neighborhoods\r\n          const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n          console.log(uniqueNeighborhoods);\r\n          return uniqueNeighborhoods;\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines() {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n        .then(restaurants => {\r\n          // Get all cuisines from all restaurants\r\n          const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n          // Remove duplicates from cuisines\r\n          const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n          return uniqueCuisines;\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`img/${restaurant.id}-600.webp`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image srcset string.\r\n     */\r\n    static srcsetForRestaurant(restaurant) {\r\n        return (`img/${restaurant.id}-400.webp 400w, \r\n      img/${restaurant.id}-600.webp 600w, \r\n      img/${restaurant.id}-800.webp 800w,\r\n      img/${restaurant.id}-1200.webp 1200w,\r\n      img/${restaurant.id}-1500.webp 1500w,\r\n      img/${restaurant.id}-2000.webp 2000w`);\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}"]}