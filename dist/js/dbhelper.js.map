{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","error","console","response","ok","Error","statusText","json","fetch","DATABASE_URL","then","validateJSON","defineRestaurants","id","fetchRestaurants","restaurant","find","r","cuisine","neighborhood","restaurants","results","filter","cuisine_type","neighborhoods","i","v","indexOf","map","uniqueCuisines","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation"],"mappings":"iYAIMA,oHAWcC,GACZC,QAAQD,MAAMA,wCACjBE,GAGG,IAAKA,EAASC,GACV,MAAMC,MAAMF,EAASG,YADzB,OAAAH,EAAKA,iDAGWI,GAKhB,OAJHJ,6CAYG,OAAOK,MAAMR,EAASS,cACjBC,KAAKV,EAASW,cACdD,KAAKV,EAASY,+DAIvBC,GAKI,OAAOb,EAASc,mBACXJ,KAAK,SAAAP,GACF,IAAMY,EAAaZ,EAASa,KAAK,SAAAC,GAAA,OAAKA,EAAEJ,IAAMA,IAC9C,GAAIE,EACA,OAAOA,oEACVG,EAAAC,GAEZ,OAAAnB,EAAAc,mBASQJ,KAAK,SAAAU,GAPd,IAAAC,EAAAD,EAeY,MANe,OAAXF,IACAG,EAAUA,EAAQC,OAAO,SAAAL,GAAA,OAAKA,EAAEM,cAAgBL,KAEhC,OAAhBC,IACAE,EAAUA,EAAQC,OAAO,SAAAL,GAAA,OAAKA,EAAEE,cAAgBA,KAE7CE,iDAHP,OAAArB,EAAImB,mBAAyBT,KAAA,SAAAU,GACA,IAAAI,EAAOL,EAAgBA,IAAAA,SAAAA,EAAAA,GAAAA,OAAvBC,EAAAK,GAAAN,eAE7B,OADCK,EAAAF,OAAA,SAAAI,EAAAD,GAAA,OAAAD,EAAAG,QAAAD,IAAAD,8CA2BT,OAAOzB,EAASc,mBACXJ,KAAK,SAAAU,GAjBV,IAAOpB,EAASc,EAATc,IACFlB,SAAAA,EAAKe,GAALf,OAAKU,EAAAK,GAAAF,eAEoC,OAAhBH,EAAYQ,OAAI,SAAAF,EAAAD,GAAA,OAAIA,EAAJE,QAAAD,IAAAD,+CAH9CV,GAQH,MAAA,wBAAAA,EAAAF,iDA4B4BE,GACzB,MAAA,OAAeA,EAAWF,GAA1B,wDAlByBO,GAAgB,MAAA,OAAAL,EAAUK,GAAV,+BAAAL,EAAjCF,GAAiC,+BACjCE,EAAAF,GADiC,8BAEjCE,EAAMc,GAF2B,gCAEMd,EAAAF,GAFN,gCAEME,EAAvCF,GAFiC,kEAoCfE,EAAYa,GAQtC,OAPe,IAAIE,OAAOC,KAAKC,QAC3BC,SAAUlB,EAAWmB,OACrBC,MAAOpB,EAAWqB,KAClBC,IAAKrC,EAASsC,iBAAiBvB,GAC/Ba,IAAKA,EA9BTW,UAAAT,OAAAC,KAAAS,UAAgCzB,4CAnGhC,MAAA","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\n\r\nclass DBHelper {\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        const port = 1337; // Change this to your server port\r\n        return `http://localhost:${port}/restaurants`;\r\n    }\r\n\r\n    static logError(error) {\r\n        console.error(error);\r\n    }\r\n\r\n    static validateJSON(response) {\r\n        if (!response.ok) {\r\n            throw Error(response.statusText);\r\n        }\r\n        return response.json();\r\n    }\r\n\r\n    static defineRestaurants(response) {\r\n        const restaurants = response;\r\n        return restaurants;\r\n    }\r\n\r\n    /**\r\n     * Retch Restaurants without error handling\r\n     * Error Handling is in other functions\r\n     */\r\n    static fetchRestaurants() {\r\n        return fetch(DBHelper.DATABASE_URL)\r\n            .then(DBHelper.validateJSON)\r\n            .then(DBHelper.defineRestaurants);\r\n    }\r\n\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     * Error handling is in window.initMap()\r\n     */\r\n    static fetchRestaurantById(id) {\r\n        return DBHelper.fetchRestaurants()\r\n            .then(response => {\r\n                const restaurant = response.find(r => r.id == id);\r\n                if (restaurant) {\r\n                    return restaurant;\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood\r\n     * Error handling is in updateRestaurants().\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood) {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n            .then(restaurants => {\r\n                let results = restaurants;\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                return results;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods.\r\n     * Error handling is in fetchNeighboods().\r\n     */\r\n    static fetchNeighborhoods() {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n            .then(restaurants => {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n                return uniqueNeighborhoods;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     * Error handling is in fetchCuisines().\r\n     */\r\n    static fetchCuisines() {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n            .then(restaurants => {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n                return uniqueCuisines;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`img/${restaurant.id}-600.webp`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image srcset string.\r\n     */\r\n    static srcsetForRestaurant(restaurant) {\r\n        return (`img/${restaurant.id}-400.webp 400w, \r\n      img/${restaurant.id}-600.webp 600w, \r\n      img/${restaurant.id}-800.webp 800w,\r\n      img/${restaurant.id}-1200.webp 1200w,\r\n      img/${restaurant.id}-1500.webp 1500w,\r\n      img/${restaurant.id}-2000.webp 2000w`);\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}"]}