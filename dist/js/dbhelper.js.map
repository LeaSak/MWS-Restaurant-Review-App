{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","error","console","response","ok","Error","statusText","json","log","idbApp","fetchRestaurantsFromDB","then","length","validateJSON","defineRestaurants","fetch","catch","id","fetchRestaurants","restaurant","find","r","cuisine","neighborhood","restaurants","results","filter","cuisine_type","neighborhoods","map","v","i","indexOf","cuisines","uniqueCuisines","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP"],"mappings":"iYAIMA,oHAWcC,GACZC,QAAQD,MAAMA,wCACjBE,GAGG,IAAKA,EAASC,GACV,MAAMC,MAAMF,EAASG,YADzB,OAAAH,EAAKA,iDAGWI,GAKhB,OAJHJ,6CAmBG,OAFAD,QAAQM,IAAI,4BAELC,OAAOC,yBACbC,KAAK,SAASR,GAFf,OAAA,IAAAA,EAAAS,OACOH,MAAOC,EAAAA,cAEVC,KAAAX,EAAAa,cACAF,KAAAX,EAAAc,mBACAH,KAAA,SAAAR,GAEI,OADAA,OAAAA,eAAJA,GACWY,IAKHC,MAAAhB,EAAOG,UAGdA,gDASkBc,GACvB,OAAOjB,EAASkB,mBACXP,KAAK,SAAAR,GACF,IAAMgB,EAAahB,EAASiB,KAAK,SAAAC,GAAA,OAAKA,EAAEJ,IAAMA,IAC9C,GAAIE,EAHLnB,OAAAA,oEAaoCsB,EAASC,GAEpD,OAAOvB,EAASkB,mBACXP,KAAK,SAAAa,GACF,IAAIC,EAAUD,EAAd,MACe,OAAXF,IACAG,EAAUA,EAAQC,OAAO,SAAAL,GAAA,OAAKA,EAAEM,cAAgBL,KAEhC,OAAhBC,IAPZE,EAAAA,EAAAC,OAAA,SAAAL,GAAA,OAAAA,EAAAE,cAAAA,KAGYE,iDAKyB,OAAAzB,EAAAkB,mBAAAP,KAAA,SAAAa,GAE7B,IAAAI,EAAAJ,EAAAK,IAAA,SAAAC,EAAAC,GAAA,OAAAP,EAAAO,GAAAR,eAgBA,OAdXK,EAAAF,OAAA,SAAAI,EAAAC,GAAA,OAAAH,EAAAI,QAAAF,IAAAC,8CAQG,OAAA/B,EAAOA,mBAECW,KAAA,SAAAa,GACsC,IAAAS,EAAUT,EAAeD,IAAAA,SAAAA,EAAAA,GAAAA,OAAzBC,EAAAO,GAAAJ,eAEtC,OADAM,EAAAP,OAAA,SAAAI,EAAAC,GAAA,OAAAE,EAAAD,QAAAF,IAAAC,+CAMZZ,GAoBI,MAAA,wBAAgCA,EAAWF,iDAMlBE,GArBzB,MAAA,OAAAA,EAAAF,GAAA,wDAKQE,GACA,MAAA,OAAMe,EAAAA,GAAN,+BAAuCf,EAAAF,GAAvC,+BAAuCE,EAAvCF,GAAA,8BACAE,EAAOe,GADP,gCAEHf,EAPLF,GAKQ,gCAGXE,EAAAF,GAHW,kEAkCkBE,EAAYU,GAQtC,OAPe,IAAIM,OAAOC,KAAKC,QAC3BC,SAAUnB,EAAWoB,OA3BzBC,MAAArB,EAAAsB,KACHC,IAAA1C,EAAA2C,iBAAAxB,GA6BOU,IAAKA,EA3Bbe,UAAAT,OAAAC,KAAAS,UAAAC,4CA1HI,MAAA","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\n\r\nclass DBHelper {\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        const port = 1337; // Change this to your server port\r\n        return `http://localhost:${port}/restaurants`;\r\n    }\r\n\r\n    static logError(error) {\r\n        console.error(error);\r\n    }\r\n\r\n    static validateJSON(response) {\r\n        if (!response.ok) {\r\n            throw Error(response.statusText);\r\n        }\r\n        return response.json();\r\n    }\r\n\r\n    static defineRestaurants(response) {\r\n        const restaurants = response;\r\n        return restaurants;\r\n    }\r\n\r\n    /**\r\n     * Fetch Restaurants without error handling\r\n     * Error Handling is in other functions\r\n     * Fetches restaurants from server\r\n     * Adds them to the database\r\n     * Returns dynamic request results\r\n     * \r\n     */\r\n    \r\n    static fetchRestaurants() {\r\n        console.log('calling fetchRestaurants');\r\n        // First try to get results from Database\r\n        return idbApp.fetchRestaurantsFromDB()\r\n        .then(function(response){\r\n            // If the database is empty\r\n            // Go to the network\r\n            // Add network response to IndexedDB\r\n            if (response.length === 0){\r\n                return fetch(DBHelper.DATABASE_URL)\r\n                .then(DBHelper.validateJSON)\r\n                .then(DBHelper.defineRestaurants)\r\n                .then(function(response){\r\n                    idbApp.addRestaurants(response);\r\n                    return response;\r\n                })\r\n                .catch(DBHelper.logError);\r\n            }\r\n            return response;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     * Error handling is in window.initMap()\r\n     */\r\n    static fetchRestaurantById(id) {\r\n        return DBHelper.fetchRestaurants()\r\n            .then(response => {\r\n                const restaurant = response.find(r => r.id == id);\r\n                if (restaurant) {\r\n                    return restaurant;\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood\r\n     * Error handling is in updateRestaurants().\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood) {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n            .then(restaurants => {\r\n                let results = restaurants;\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                return results;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods.\r\n     * Error handling is in fetchNeighboods().\r\n     */\r\n    static fetchNeighborhoods() {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n            .then(restaurants => {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n                return uniqueNeighborhoods;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     * Error handling is in fetchCuisines().\r\n     */\r\n    static fetchCuisines() {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n            .then(restaurants => {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n                return uniqueCuisines;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`img/${restaurant.id}-600.webp`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image srcset string.\r\n     */\r\n    static srcsetForRestaurant(restaurant) {\r\n        return (`img/${restaurant.id}-400.webp 400w, \r\n      img/${restaurant.id}-600.webp 600w, \r\n      img/${restaurant.id}-800.webp 800w,\r\n      img/${restaurant.id}-1200.webp 1200w,\r\n      img/${restaurant.id}-1500.webp 1500w,\r\n      img/${restaurant.id}-2000.webp 2000w`);\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}"]}