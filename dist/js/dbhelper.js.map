{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","callback","fetch","DATABASE_URL","then","response","ok","Error","statusText","catch","error","restaurants","id","fetchRestaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","google","maps","Marker","position","title","name","url","urlForRestaurant","animation"],"mappings":"iYAGMA,4HAcsBC,GAEpBC,MAAMF,EAASG,cAAcC,KAAK,SAAAC,GAC9B,IAAKA,EAASC,GACV,MAAMC,MAAMF,EAASG,YAF7BN,OAAMF,EAASG,SACXC,KAAI,SAAAC,GAEH,OAAAJ,EAAA,KADeI,KAFpBI,MAKY,SAAAC,GAEJ,OAAOT,EADPS,EACsBC,oDAQlCC,EAAAX,GAKID,EAASa,iBAAiB,SAACH,EAAOC,GAC9B,GAAID,EACAT,EAASS,EAAO,UACb,CACH,IAAMI,EAAaH,EAAYI,KANZd,SAAAA,GAAAA,OAMsBe,EANZJ,IAAAA,IACrCE,EACAd,EAASa,KAAAA,GAEDZ,EAASS,4BAAT,0DAKSO,EAAAhB,GAERD,EAAAa,iBAAA,SAAAH,EAAAC,GACJ,GAAAD,EAVLT,EAAAS,EAAA,UAYH,CAED,IAAAQ,EAAAP,EAAAQ,OAAA,SAAAH,GAAA,OAAAA,EAAAI,cAAAH,IAWYhB,EAAS,KAAMiB,4DALRG,EAAApB,GAEVD,EAFDa,iBAEO,SAAAH,EAAAC,GACH,GAAAD,EACAT,EAAMiB,EAAAA,UAA6B,CACnCjB,IAAAA,EAASU,EAATQ,OAAA,SAAAH,GAAA,OAAAA,EAAAK,cAAAA,IACHpB,EAAA,KAAAiB,sEAuBsCD,EAASI,EAAcpB,GAElED,EAASa,iBAAiB,SAACH,EAAOC,GAjBlC,GAAAD,EACAV,EAASa,EAAAA,UACL,CACIZ,IAAAA,EAASS,EACN,OAFPO,IAGIC,EAAAA,EAAAC,OAAA,SAAAH,GAAA,OAAAA,EAAAI,cAAAH,KAC0CI,OAAPA,IAAAH,EAAnCA,EAAAC,OAAA,SAAAH,GAAA,OAAAA,EAAAK,cAAAA,KAEHpB,EAAA,KAAAiB,iDA4BiBjB,GAEtBD,EAASa,iBAAiB,SAACH,EAAOC,GAtBlC,GAAAD,EACAV,EAASa,EAAAA,UACL,CAEC,IAFDS,EAEOX,EAAAY,IAAA,SAAAC,EAAAC,GAAA,OAAAd,EAAAc,GAAAJ,eAEHK,EAAsBJ,EAAAH,OAAA,SAAAK,EAAAC,GAAA,OAAAH,EAAAK,QAAAH,IAAAC,IAAExB,EAAA,KAAAyB,4CAIKzB,GAC5BD,EAAAa,iBAAA,SAAAH,EAAAC,GACDV,GAAAA,EACHA,EAAAS,EAAA,UAZL,CA4CQ,IAAMkB,EAAWjB,EAAYY,IAAI,SAACC,EAAGC,GAAJ,OAAUd,EAAYc,GAAGL,eAEpDS,EAAiBD,EAAST,OAAO,SAACK,EAAGC,GAAJ,OAAUG,EAASD,QAAQH,IAAMC,IACxExB,EAAS,KAAM4B,+CAxBf5B,GACH,MAAA,wBAAMa,EAAAF,iDAIGc,GAA2C,MAAA,OAAAZ,EAAUQ,GAAV,wDAyClCR,GAnC3B,MAAA,OAAAA,EAAAF,GAAA,+BAqCQE,EAAWF,GArCnB,+BAsCQE,EAAWF,GAtCnB,8BAuCQE,EAAWF,GAvCnB,gCAwCQE,EAAWF,GAxCnB,gCAyCQE,EAAWF,GAzCnB,kEAQeE,EAAAS,GAIoC,OAHvC,IAAAO,OAAAC,KAAAC,QACAC,SAAAnB,EAAMc,OAA2BM,MAAApB,EAAAqB,KAAAC,IAAApC,EAAjCqC,iBAAAvB,GACAS,IAAAA,EACAe,UAAAR,OAAMD,KAAAA,UAAiBD,4CA7H/B,MAAA","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        const port = 1337; // Change this to your server port\r\n        return `http://localhost:${port}/restaurants`;\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    static fetchRestaurants(callback) {\r\n\r\n        fetch(DBHelper.DATABASE_URL).then(response => {\r\n            if (!response.ok) {\r\n                throw Error(response.statusText);\r\n            }\r\n                return response.json();\r\n            }).then(response => {\r\n                const restaurants = response;\r\n                return callback(null, restaurants);\r\n            })\r\n            .catch( error => {\r\n                const errorMsg = ('Oops!. Got an error from server', error);\r\n                return callback(errorMsg, null);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id, callback) {\r\n        // fetch all restaurants with proper error handling.\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                const restaurant = restaurants.find(r => r.id == id);\r\n                if (restaurant) { // Got the restaurant\r\n                    callback(null, restaurant);\r\n                } else { // Restaurant does not exist in the database\r\n                    callback('Restaurant does not exist', null);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants;\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`img/${restaurant.id}-600.webp`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image srcset string.\r\n     */\r\n    static srcsetForRestaurant(restaurant) {\r\n        return (`img/${restaurant.id}-400.webp 400w, \r\n      img/${restaurant.id}-600.webp 600w, \r\n      img/${restaurant.id}-800.webp 800w,\r\n      img/${restaurant.id}-1200.webp 1200w,\r\n      img/${restaurant.id}-1500.webp 1500w,\r\n      img/${restaurant.id}-2000.webp 2000w`);\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}"]}