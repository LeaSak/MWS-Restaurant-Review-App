{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","idb","open","upgradeDb","oldVersion","console","log","createObjectStore","keyPath","restaurants","createDatabase","then","db","store","transaction","objectStore","Promise","all","map","restaurant","put","catch","error","tx","abort","getAll","response","ok","Error","json","fetchRestaurantsFromDB","length","fetchRestaurantsFromNetwork","addRestaurantsToDB","logError","fetch","validateJSON","id","fetchRestaurants","find","r","cuisine","neighborhood","results","filter","cuisine_type","neighborhoods","v","i","indexOf","cuisines","uniqueNeighborhoods","uniqueCuisines","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP"],"mappings":"iYAIMA,4HAIM,OADeC,IAAIC,KAAK,cAAe,EAAG,SAACC,GAC3C,OAAQA,EAAUC,YACd,KAAK,EAIL,KAAK,EACDC,QAAQC,IAAI,yCACZH,EAAUI,kBAAkB,eAAiBC,QAAS,qDAJtDC,GACA,OAAAT,EAAAU,iBACJC,KAAA,SAAAC,GACIP,GAAAA,EAAAA,CAPZ,IAsBcQ,EAtBdD,EAAAE,YAAA,cAAA,aAsByBC,YAAY,eATxC,OAAAC,QAAAC,IAAAR,EAAAS,IAAA,SAAAC,GAae,OADAd,QAAQC,IAAI,kCACLO,EAAMO,IAAID,SARzBE,MAAA,SAAAC,GACQC,GAAAC,QACHnB,QAAAiB,MAAAA,sDAMG,OAAAtB,EAAAU,iBACHC,KAAA,SAAAC,GACR,IAEOW,EADDX,EAAAE,YAAW,cAAA,YACVC,YAAA,eAEH,OADGV,QAAAA,IAAQiB,sCAfhBT,EAAAY,4CAwCYH,GACZjB,QAAQiB,MAAMA,wCAGEI,GAChB,IAAKA,EAASC,GACV,MAAMC,MAAMF,EANJJ,YAEf,OAAAI,EAAAG,iDASwBH,GALjB,OADJA,6CAuBA,OAFArB,QAAQC,IAAI,4BAELN,EAAS8B,yBACXnB,KAAK,SAASe,GAIX,OAAwB,IAApBA,EAASK,OACF/B,EAASgC,8BACfrB,KAAK,SAAAe,GARlB,OADY1B,EAAAiC,mBAAZP,GACAA,IAGQL,MAAArB,EAAAkC,UAEAR,0DAMK,OAAAS,MAJMnC,EAKAA,cACVW,KAAAX,EAAAoC,cACDzB,KAAAX,EAAO0B,+DAQlBW,GAOG,OAAOrC,EAASsC,mBALpB3B,KAAA,SAAAe,GAOY,IAAMP,EAAaO,EAASa,KAAK,SAAAC,GAAA,OAAKA,EAAEH,IAAMA,IAC9C,GAAIlB,EACA,OAAOA,oEADKsB,EAAAC,GAEf,OAAA1C,EAAAsC,mBALF3B,KAAP,SAAAF,GAOH,IAAAkC,EAAAlC,EAiBW,MANe,OAAXgC,IAThBE,EAAAA,EAAAC,OAAA,SAAAJ,GAAA,OAAAA,EAAAK,cAAAJ,KAYgC,OAAhBC,IACAC,EAAUA,EAAQC,OAAO,SAAAJ,GAAA,OAAKA,EAAEE,cAAgBA,KAE7CC,iDALsB,OAAA3C,EAAzBsC,mBACH3B,KAAA,SAAAF,GAC4B,IAAAqC,EAAArC,EAAAS,IAAA,SAAA6B,EAAAC,GAAA,OAAAvC,EAAAuC,GAAAN,eACA,OAAOA,EAAgBA,OAAvB,SAAAK,EAAAC,GAAA,OAAAF,EAAAG,QAAAF,IAAAC,8CA4BrC,OAAOhD,EAASsC,mBACX3B,KAAK,SAAAF,GAEF,IAAMyC,EAAWzC,EArBDS,IAAA,SAAA6B,EAAAC,GAAA,OAAAvC,EAAAuC,GAAAH,eAIhB,OAFQP,EACX3B,OAAK,SAAAoC,EAAAC,GAAA,OAAAE,EAAAD,QAAeF,IAAAC,+CAIjB7B,GACA,MAAA,wBAAOgC,EAAPd,iDA8BiBlB,GACzB,MAAA,OAAeA,EAAWkB,GAA1B,wDArBgBC,GAER,MAAA,OAAAnB,EAAAkB,GAAA,+BACAlB,EAAM+B,GADN,+BACiC/B,EAAAkB,GADjC,8BACiClB,EAAjCkB,GADA,gCAEAlB,EAAAkB,GAFA,gCAGAlB,EAAMiC,GAHN,kEAqCkBjC,EAAYD,GAzBtC,OAJJ,IAAAmC,OAAAC,KAAAC,QA+BQC,SAAUrC,EAAWsC,OACrBC,MAAOvC,EAAWwC,KAClBC,IAAK5D,EAAS6D,iBAAiB1C,GAC/BD,IAAKA,EACL4C,UAAWT,OAAOC,KAAKS,UAAUC,4CAnKxC,MAAA","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\n\r\nclass DBHelper {\r\n\r\n    static createDatabase() {\r\n        const idbPromise = idb.open('restaurants', 2, (upgradeDb) => {\r\n            switch (upgradeDb.oldVersion) {\r\n                case 0:\r\n                    // a placeholder case so that the switch block will\r\n                    // execute when the database is first created\r\n                    // (oldVersion is 0)\r\n                case 1:\r\n                    console.log('Creating the restaurants object store');\r\n                    upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\r\n            }\r\n        })\r\n        \r\n        return idbPromise;\r\n    }\r\n\r\n    static addRestaurantsToDB(restaurants){\r\n        return DBHelper.createDatabase()\r\n        .then((db) => {\r\n            if (!db) {\r\n                    return;\r\n                }\r\n                const tx = db.transaction('restaurants', 'readwrite');\r\n                const store = tx.objectStore('restaurants');\r\n\r\n                return Promise.all(restaurants.map(restaurant => {\r\n                    console.log('adding restaurants to database');\r\n                    return store.put(restaurant);\r\n                }));\r\n        })\r\n        .catch((error) => {\r\n                tx.abort();\r\n                console.error(error);\r\n            });\r\n\r\n    }\r\n\r\n    static fetchRestaurantsFromDB(){\r\n        return DBHelper.createDatabase()\r\n        .then((db) => {\r\n            const tx = db.transaction('restaurants', 'readonly');\r\n            const store = tx.objectStore('restaurants');\r\n            console.log('fetching restaurants from database');\r\n            return store.getAll();\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        const port = 1337; // Change this to your server port\r\n        return `http://localhost:${port}/restaurants`;\r\n    }\r\n\r\n    static logError(error) {\r\n        console.error(error);\r\n    }\r\n\r\n    static validateJSON(response) {\r\n        if (!response.ok) {\r\n            throw Error(response.statusText);\r\n        }\r\n        return response.json();\r\n    }\r\n\r\n    static defineRestaurants(response) {\r\n        const restaurants = response;\r\n        return restaurants;\r\n    }\r\n\r\n    /**\r\n     * Fetch Restaurants without error handling\r\n     * Error Handling is in other functions\r\n     * Fetches restaurants from server\r\n     * Adds them to the database\r\n     * Returns dynamic request results\r\n     * \r\n     */\r\n\r\n    static fetchRestaurants() {\r\n        console.log('calling fetchRestaurants');\r\n        // First try to get results from Database\r\n        return DBHelper.fetchRestaurantsFromDB()\r\n            .then(function(response) {\r\n                // If the database is empty\r\n                // Go to the network\r\n                // Add network response to IndexedDB\r\n                if (response.length === 0) {\r\n                    return DBHelper.fetchRestaurantsFromNetwork()\r\n                    .then(response => {\r\n                        DBHelper.addRestaurantsToDB(response);\r\n                        return response;\r\n                    })\r\n                    .catch(DBHelper.logError);\r\n                }\r\n                return response;\r\n            });\r\n    }\r\n\r\n    static fetchRestaurantsFromNetwork(){\r\n        return fetch(DBHelper.DATABASE_URL)\r\n        .then(DBHelper.validateJSON)\r\n        .then(DBHelper.defineRestaurants);\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     * Error handling is in window.initMap()\r\n     */\r\n    static fetchRestaurantById(id) {\r\n        return DBHelper.fetchRestaurants()\r\n            .then(response => {\r\n                const restaurant = response.find(r => r.id == id);\r\n                if (restaurant) {\r\n                    return restaurant;\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood\r\n     * Error handling is in updateRestaurants().\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood) {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n            .then(restaurants => {\r\n                let results = restaurants;\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                return results;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods.\r\n     * Error handling is in fetchNeighboods().\r\n     */\r\n    static fetchNeighborhoods() {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n            .then(restaurants => {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n                return uniqueNeighborhoods;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     * Error handling is in fetchCuisines().\r\n     */\r\n    static fetchCuisines() {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n            .then(restaurants => {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n                return uniqueCuisines;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`img/${restaurant.id}-600.webp`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image srcset string.\r\n     */\r\n    static srcsetForRestaurant(restaurant) {\r\n        return (`img/${restaurant.id}-400.webp 400w, \r\n      img/${restaurant.id}-600.webp 600w, \r\n      img/${restaurant.id}-800.webp 800w,\r\n      img/${restaurant.id}-1200.webp 1200w,\r\n      img/${restaurant.id}-1500.webp 1500w,\r\n      img/${restaurant.id}-2000.webp 2000w`);\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}"]}