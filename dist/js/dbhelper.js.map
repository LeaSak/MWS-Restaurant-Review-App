{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","idb","open","upgradeDb","oldVersion","console","log","createObjectStore","keyPath","restaurants","createDatabase","idbPromise","db","transaction","objectStore","Promise","all","map","restaurant","store","put","catch","error","tx","abort","then","response","ok","Error","statusText","json","fetch","validateJSON","defineRestaurants","fetchRestaurantsFromDB","length","fetchRestaurantsFromNetwork","addRestaurantsToDB","logError","r","id","cuisine","neighborhood","fetchRestaurants","results","filter","cuisine_type","v","i","neighborhoods","indexOf","cuisines","uniqueNeighborhoods","target","document","mapScript","createElement","src","appendChild","uniqueCuisines","anchorID","anchor","getElementById","mapFrame","mapElemID","addEventListener","e","preventDefault","classList","toggle","window","google","addScript","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP"],"mappings":"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","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\n\r\nclass DBHelper {\r\n\r\n    /**\r\n     * Make an IndexedDB Database\r\n     */\r\n    static createDatabase() {\r\n        const idbPromise = idb.open('restaurants', 2, (upgradeDb) => {\r\n            switch (upgradeDb.oldVersion) {\r\n                case 0:\r\n                    // a placeholder case so that the switch block will\r\n                    // execute when the database is first created\r\n                    // (oldVersion is 0)\r\n                case 1:\r\n                    console.log('Creating the restaurants object store');\r\n                    upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\r\n            }\r\n        })\r\n        \r\n        return idbPromise;\r\n    }\r\n\r\n    /**\r\n     * Add restaurants to the database\r\n     */\r\n    static addRestaurantsToDB(restaurants){\r\n        return DBHelper.createDatabase()\r\n        .then((db) => {\r\n            if (!db) {\r\n                    return;\r\n                }\r\n                const tx = db.transaction('restaurants', 'readwrite');\r\n                const store = tx.objectStore('restaurants');\r\n\r\n                return Promise.all(restaurants.map(restaurant => {\r\n                    console.log('adding restaurants to database');\r\n                    return store.put(restaurant);\r\n                }));\r\n        })\r\n        .catch((error) => {\r\n                tx.abort();\r\n                console.error(error);\r\n            });\r\n\r\n    }\r\n\r\n    /**\r\n     * Get all restaurants from the database\r\n     */\r\n    static fetchRestaurantsFromDB(){\r\n        return DBHelper.createDatabase()\r\n        .then((db) => {\r\n            const tx = db.transaction('restaurants', 'readonly');\r\n            const store = tx.objectStore('restaurants');\r\n            console.log('fetching restaurants from database');\r\n            return store.getAll();\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        const port = 1337; // Change this to your server port\r\n        return `http://localhost:${port}/restaurants`;\r\n    }\r\n\r\n    static logError(error) {\r\n        console.error(error);\r\n    }\r\n\r\n    static validateJSON(response) {\r\n        if (!response.ok) {\r\n            throw Error(response.statusText);\r\n        }\r\n        return response.json();\r\n    }\r\n\r\n    static defineRestaurants(response) {\r\n        const restaurants = response;\r\n        return restaurants;\r\n    }\r\n\r\n\r\n    /**\r\n     * Go to network to get restaurants\r\n     */\r\n    static fetchRestaurantsFromNetwork(){\r\n        return fetch(DBHelper.DATABASE_URL)\r\n        .then(DBHelper.validateJSON)\r\n        .then(DBHelper.defineRestaurants);\r\n    }\r\n\r\n    /**\r\n     * Fetch Restaurants without error handling\r\n     * Error Handling is in other functions\r\n     * Fetches restaurants from server\r\n     * Adds them to the database\r\n     * Returns dynamic request results\r\n     * \r\n     */\r\n\r\n    static fetchRestaurants() {\r\n        console.log('calling fetchRestaurants');\r\n        // First try to get results from Database\r\n        return DBHelper.fetchRestaurantsFromDB()\r\n            .then(function(response) {\r\n                // If the database is empty\r\n                // Go to the network\r\n                // Add network response to IndexedDB\r\n                if (response.length === 0) {\r\n                    return DBHelper.fetchRestaurantsFromNetwork()\r\n                    .then(response => {\r\n                        DBHelper.addRestaurantsToDB(response);\r\n                        return response;\r\n                    })\r\n                    .catch(DBHelper.logError);\r\n                }\r\n                return response;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     * Error handling is in window.initMap()\r\n     */\r\n    static fetchRestaurantById(id) {\r\n        return DBHelper.fetchRestaurants()\r\n            .then(response => {\r\n                const restaurant = response.find(r => r.id == id);\r\n                if (restaurant) {\r\n                    return restaurant;\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood\r\n     * Error handling is in updateRestaurants().\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood) {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n            .then(restaurants => {\r\n                let results = restaurants;\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                return results;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods.\r\n     * Error handling is in fetchNeighboods().\r\n     */\r\n    static fetchNeighborhoods() {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n            .then(restaurants => {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n                return uniqueNeighborhoods;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     * Error handling is in fetchCuisines().\r\n     */\r\n    static fetchCuisines() {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n            .then(restaurants => {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n                return uniqueCuisines;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`img/${restaurant.id}-600.jpg`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image srcset string.\r\n     */\r\n    static srcsetForRestaurant(restaurant) {\r\n        return (`img/webp/${restaurant.id}-400.webp 400w, \r\n      img/webp/${restaurant.id}-600.webp 600w, \r\n      img/webp/${restaurant.id}-800.webp 800w`);\r\n    }\r\n\r\n    /**\r\n     * Add map script to html\r\n     */\r\n    static addScript() {\r\n        const target = document.body;\r\n        const mapScript = document.createElement('script');\r\n        mapScript.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyCSQXjgi1K6hqDS4W3nWVK_z0lntlbLFPo&libraries=places&callback=initMap';\r\n        target.appendChild(mapScript);\r\n    }\r\n\r\n    static toggleMap(anchorID, mapElemID){\r\n        const anchor = document.getElementById(anchorID);\r\n        const mapFrame = document.getElementById(mapElemID);\r\n        \r\n        anchor.addEventListener('click', (e) => {\r\n            // Prevent Default link behaviour\r\n            e.preventDefault();\r\n\r\n            // Check for map section\r\n            if (!mapFrame) return;\r\n\r\n            // Toggle map section visiblity\r\n            mapFrame.classList.toggle('is-visible');\r\n\r\n            // Fetch script only if it hasn't already been fetched\r\n            if (!window.google) {\r\n                DBHelper.addScript();\r\n            }\r\n\r\n        }, false);\r\n\r\n    }\r\n    \r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}"]}