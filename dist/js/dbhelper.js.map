{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","fetch","DATABASE_URL","then","response","ok","Error","statusText","json","restaurants","console","log","id","fetchRestaurants","restaurant","find","r","catch","error","cuisine","filter","cuisine_type","neighborhood","results","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP"],"mappings":"iYAGMA,8HAgCE,OAAOC,MAAMD,EAASE,cAAcC,KAAK,SAAAC,GACrC,IAAKA,EAASC,GACV,MAAMC,MAAMF,EAASG,YADzB,OAAKH,EAALI,SACIL,KAAA,SAAAC,GACH,IAAAK,EAAAL,EAEED,OADCO,QAAON,IAAAA,GACHK,IAEJC,MAAAA,SAAAA,GACAA,QAAAC,IAAOF,iDA2BQG,GAEvB,OAAOZ,EAASa,mBACfV,KAAK,SAAAC,GACJ,IAAMU,EAAaV,EAASW,KAAK,SAAAC,GAAA,OAAKA,EAAEJ,IAAMA,IAC9C,GAAGE,EAJL,OAAAA,IAGmCG,MAAA,SAAAC,GAAAR,QAAjCC,IAAA,4BAAAO,sDA0B0BC,GAE5BnB,EAASa,mBACRV,KAAK,SAAAM,GAGJ,OADgBA,EAAYW,OAAO,SAAAJ,GAAA,OAAKA,EAAEK,cAAgBF,MAJ5DF,MAAA,SAAAC,GACAlB,QAAAA,IAASa,2DA4BwBS,GAEjCtB,EAASa,mBACRV,KAAK,SAAAW,GAJV,OAMsBL,YAAYW,OAAO,SAAAJ,GAAA,OAAKA,EAAEM,cAAgBA,MAG3DJ,MAAM,SAAAA,GACLR,QAAQC,IAAIO,qEA0B6BC,EAASG,GAEpD,OAAOtB,EAASa,mBACfV,KAAK,SAAAM,GACF,IAAIc,EAAUd,EAOd,MANe,OAAXU,IACAI,EAAUA,EAAQH,OAAO,SAAAJ,GAAA,OAAKA,EAAEK,cAAgBF,KAEhC,OAAhBG,IATZC,EAAAA,EAAAH,OAAA,SAAAJ,GAAA,OAAAA,EAAAM,cAAAA,KAYeC,IAEVN,MAAM,SAAAC,GAZPR,QAAAC,IAAAO,kDAsCA,OAAOlB,EAASa,mBACfV,KAAK,SAAAM,GAEJ,IAAMe,EAAgBf,EAAYgB,IAAI,SAACC,EAAGC,GAAJ,OAAUlB,EAAYkB,GAAGL,eAEzDM,EAAsBJ,EAAcJ,OAAO,SAACM,EAAGC,GAAJ,OAAUH,EAAcK,QAAQH,IAAMC,IAEvF,OADAjB,QAAQC,IAAIiB,GACLA,IAERX,MAAM,SAAAC,GACLR,QAAQC,IAAIO,6CAyBd,OAAOlB,EAASa,mBArBpBV,KAAA,SAAAM,GAwBM,IAAMqB,EAAWrB,EAAYgB,IAAI,SAACC,EAAGC,GAAJ,OAAUlB,EAAYkB,GAAGN,eAG1D,OADuBS,EAASV,OAAO,SAACM,EAAGC,GAAJ,OAAUG,EAASD,QAAQH,IAAMC,MAGzEV,MAAM,SAAAC,GACLR,QAAQC,IAAIO,8CAOMJ,GACpB,MAAA,wBAAgCA,EAAWF,iDAMlBE,GAxBzB,MAAA,OAAAA,EAAAF,GAAA,wDAKEE,GACA,MAAA,OAAMiB,EAAAA,GAAN,+BAAuCjB,EAAAF,GAAvC,+BAAuCE,EAAvCF,GAAA,8BACAE,EAAOiB,GADP,gCAEDjB,EACMF,GAHL,gCAIAF,EAAAA,GAJA,kEAqCwBI,EAAYW,GAtB1C,OAuBmB,IAAIO,OAAOC,KAAKC,QAC3BC,SAAUrB,EAAWsB,OACrBC,MAAOvB,EAAWwB,KAClBC,IAAKvC,EAASwC,iBA9BE1B,GACpBW,IAAAA,EACHgB,UAAAT,OAAAC,KAAAS,UAAAC,4CAtPG,MAAA","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        const port = 1337; // Change this to your server port\r\n        return `http://localhost:${port}/restaurants`;\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    /*static fetchRestaurants(callback) {\r\n\r\n        fetch(DBHelper.DATABASE_URL).then(response => {\r\n            if (!response.ok) {\r\n                throw Error(response.statusText);\r\n            }\r\n                return response.json();\r\n            }).then(response => {\r\n                const restaurants = response;\r\n                return callback(null, restaurants);\r\n            })\r\n            .catch( error => {\r\n                const errorMsg = ('Oops!. Got an error from server', error);\r\n                return callback(errorMsg, null);\r\n            });\r\n    }*/\r\n    static fetchRestaurants() {\r\n\r\n        return fetch(DBHelper.DATABASE_URL).then(response => {\r\n            if (!response.ok) {\r\n                throw Error(response.statusText);\r\n            }\r\n                return response.json();\r\n            }).then(response => {\r\n                const restaurants = response;\r\n                console.log(restaurants);\r\n                return restaurants;\r\n            })\r\n            .catch( error => {\r\n              console.log(error);\r\n                /*const errorMsg = ('Oops!. Got an error from server', error);\r\n                return callback(errorMsg, null);*/\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    /*static fetchRestaurantById(id, callback) {\r\n        // fetch all restaurants with proper error handling.\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                const restaurant = restaurants.find(r => r.id == id);\r\n                if (restaurant) { // Got the restaurant\r\n                    callback(null, restaurant);\r\n                } else { // Restaurant does not exist in the database\r\n                    callback('Restaurant does not exist', null);\r\n                }\r\n            }\r\n        });\r\n    }*/\r\n    static fetchRestaurantById(id) {\r\n        // fetch all restaurants with proper error handling.\r\n        return DBHelper.fetchRestaurants()\r\n        .then(response => {\r\n          const restaurant = response.find(r => r.id == id);\r\n          if(restaurant){\r\n            return restaurant;\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.log('Restaurant does not exist', error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    /*static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }*/\r\n\r\n    static fetchRestaurantByCuisine(cuisine) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants()\r\n        .then(restaurants => {\r\n          // Filter restaurants to have only given cuisine type\r\n          const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n          return results;\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    /*static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }*/\r\n\r\n    //fetchRestaurantByNeighborhood - Promise\r\n    static fetchRestaurantByNeighborhood(neighborhood) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants()\r\n        .then(restaurant => {\r\n          // Filter restaurants to have only given neighborhood\r\n          const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n          return results;\r\n        })\r\n        .error(error => {\r\n          console.log(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    /*static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants;\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }*/\r\n\r\n    //fetchRestaurantByCuisineAndNeighborhood with Promise\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood) {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n        .then(restaurants => {\r\n            let results = restaurants;\r\n            if (cuisine != 'all') { // filter by cuisine\r\n                results = results.filter(r => r.cuisine_type == cuisine);\r\n            }\r\n            if (neighborhood != 'all') { // filter by neighborhood\r\n                results = results.filter(r => r.neighborhood == neighborhood);\r\n            }\r\n            return results;\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    /*static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }*/\r\n\r\n    // fetchNeighborhood with Promise\r\n    static fetchNeighborhoods() {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n        .then(restaurants => {\r\n          // Get all neighborhoods from all restaurants\r\n          const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n          // Remove duplicates from neighborhoods\r\n          const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n          console.log(uniqueNeighborhoods);\r\n          return uniqueNeighborhoods;\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    /*static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }*/\r\n\r\n    // fetchCuisine by Promise\r\n    static fetchCuisines() {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n        .then(restaurants => {\r\n          // Get all cuisines from all restaurants\r\n          const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n          // Remove duplicates from cuisines\r\n          const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n          return uniqueCuisines;\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`img/${restaurant.id}-600.webp`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image srcset string.\r\n     */\r\n    static srcsetForRestaurant(restaurant) {\r\n        return (`img/${restaurant.id}-400.webp 400w, \r\n      img/${restaurant.id}-600.webp 600w, \r\n      img/${restaurant.id}-800.webp 800w,\r\n      img/${restaurant.id}-1200.webp 1200w,\r\n      img/${restaurant.id}-1500.webp 1500w,\r\n      img/${restaurant.id}-2000.webp 2000w`);\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}"]}