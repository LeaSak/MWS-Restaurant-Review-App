{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","idb","open","upgradeDb","oldVersion","console","log","createObjectStore","keyPath","restaurants","createDatabase","idbPromise","db","transaction","objectStore","Promise","all","map","restaurant","store","put","catch","error","tx","abort","then","getAll","reviews","review","response","ok","Error","statusText","json","fetch","DATABASE_URL","defineRestaurants","fetchRestaurantsFromDB","length","fetchRestaurantsFromNetwork","addRestaurantsToDB","logError","id","validateJSON","fetchReviewsFromDB","addReviewsToDB","fetchReviewsByIdFromNetwork","cuisine","neighborhood","fetchRestaurants","results","r","cuisine_type","filter","v","i","neighborhoods","indexOf","cuisines","target","document","body","mapScript","uniqueCuisines","src","appendChild","anchorID","mapElemID","anchor","getElementById","mapFrame","addEventListener","e","preventDefault","classList","toggle","window","google","addScript","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP"],"mappings":"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","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\n\r\nclass DBHelper {\r\n\r\n    /**\r\n     * Make an IndexedDB Database\r\n     */\r\n    static createDatabase() {\r\n        const idbPromise = idb.open('restaurants', 2, (upgradeDb) => {\r\n            switch (upgradeDb.oldVersion) {\r\n                case 0:\r\n                    // a placeholder case so that the switch block will\r\n                    // execute when the database is first created\r\n                    // (oldVersion is 0)\r\n                case 1:\r\n                    console.log('Creating the restaurants object store');\r\n                    upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\r\n\r\n                case 2:\r\n                    console.log('Creating the reviews object store');\r\n                    upgradeDb.createObjectStore('reviews', { keyPath: 'id'})\r\n            }\r\n        })\r\n\r\n        return idbPromise;\r\n    }\r\n\r\n    /**\r\n     * Add restaurants to the database\r\n     */\r\n    static addRestaurantsToDB(restaurants){\r\n        return DBHelper.createDatabase()\r\n        .then((db) => {\r\n            if (!db) {\r\n                    return;\r\n                }\r\n                const tx = db.transaction('restaurants', 'readwrite');\r\n                const store = tx.objectStore('restaurants');\r\n\r\n                return Promise.all(restaurants.map(restaurant => {\r\n                    console.log('adding restaurants to database');\r\n                    return store.put(restaurant);\r\n                }));\r\n        })\r\n        .catch((error) => {\r\n                tx.abort();\r\n                console.error(error);\r\n            });\r\n\r\n    }\r\n\r\n    /**\r\n     * Get all restaurants from the database\r\n     */\r\n    static fetchRestaurantsFromDB(){\r\n        return DBHelper.createDatabase()\r\n        .then((db) => {\r\n            const tx = db.transaction('restaurants', 'readonly');\r\n            const store = tx.objectStore('restaurants');\r\n            return store.getAll();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add reviews to the database\r\n     */\r\n     static addReviewsToDB(reviews){\r\n        return DBHelper.createDatabase()\r\n        .then((db) => {\r\n            if (!db) {\r\n                    return;\r\n                }\r\n            const tx = db.transaction('reviews', 'readwrite');\r\n            const store = tx.objectStore('reviews');\r\n\r\n            return Promise.all(reviews.map(review => {\r\n                console.log('adding reviews to database');\r\n                return store.put(review);\r\n            }));\r\n\r\n        })\r\n        .catch((error) => {\r\n            tx.abort();\r\n            console.error(error);\r\n        });\r\n     }\r\n\r\n    /**\r\n     * Fetch reviews from database\r\n     */\r\n    static fetchReviewsFromDB(){\r\n        return DBHelper.createDatabase()\r\n        .then((db) => {\r\n            const tx = db.transaction('reviews', 'readonly');\r\n            const store = tx.objectStore('reviews');\r\n            return store.getAll();\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n\r\n    static get DATABASE_URL() {\r\n        const port = 1337; // Change this to your server port\r\n        return `http://localhost:${port}`;\r\n    }\r\n\r\n\r\n    static logError(error) {\r\n        console.error(error);\r\n    }\r\n\r\n    static validateJSON(response) {\r\n        if (!response.ok) {\r\n            throw Error(response.statusText);\r\n        }\r\n        return response.json();\r\n    }\r\n\r\n    static defineRestaurants(response) {\r\n        const restaurants = response;\r\n        return restaurants;\r\n    }\r\n\r\n    /**\r\n     * Go to network to get restaurants\r\n     */\r\n    static fetchRestaurantsFromNetwork(){\r\n        return fetch(DBHelper.DATABASE_URL + '/restaurants')\r\n        .then(DBHelper.validateJSON)\r\n        .then(DBHelper.defineRestaurants);\r\n    }\r\n\r\n    /**\r\n     * Fetch Restaurants without error handling\r\n     * Error Handling is in other functions\r\n     * Fetches restaurants from server\r\n     * Adds them to the database\r\n     * Returns dynamic request results\r\n     *\r\n     */\r\n\r\n    static fetchRestaurants() {\r\n        // First try to get results from Database\r\n        return DBHelper.fetchRestaurantsFromDB()\r\n            .then(function(response) {\r\n                // If the database is empty\r\n                // Go to the network\r\n                // Add network response to IndexedDB\r\n                if (response.length === 0) {\r\n                    return DBHelper.fetchRestaurantsFromNetwork()\r\n                    .then(response => {\r\n                        DBHelper.addRestaurantsToDB(response);\r\n                        return response;\r\n                    })\r\n                    .catch(DBHelper.logError);\r\n                }\r\n                return response;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Go to network to get reviews\r\n     */\r\n    static fetchReviewsByIdFromNetwork(id) {\r\n        return fetch(DBHelper.DATABASE_URL + `/reviews/?restaurant_id=${id}`)\r\n        .then(DBHelper.validateJSON)\r\n        .then(response => {\r\n            return response;\r\n        })\r\n\r\n    }\r\n\r\n    /**\r\n     * Fetch reviews from DB\r\n     * If no reviews, fetch from network\r\n     * add to database\r\n     */\r\n    static fetchReviewsById(id){\r\n        return DBHelper.fetchReviewsFromDB()\r\n        .then(function(response){\r\n            if (response.length === 0) {\r\n                    return DBHelper.fetchReviewsByIdFromNetwork(id)\r\n                    .then(response => {\r\n                        DBHelper.addReviewsToDB(response);\r\n                        return response;\r\n                    })\r\n                    .catch(DBHelper.logError);\r\n                }\r\n                return response;\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     * Error handling is in window.initMap()\r\n     */\r\n    static fetchRestaurantById(id) {\r\n        return fetch(DBHelper.DATABASE_URL + '/restaurants/' + id)\r\n            .then(DBHelper.validateJSON)\r\n            .then((response) => {\r\n                return response;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood\r\n     * Error handling is in updateRestaurants().\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood) {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n            .then(restaurants => {\r\n                let results = restaurants;\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                return results;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods.\r\n     * Error handling is in fetchNeighboods().\r\n     */\r\n    static fetchNeighborhoods() {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n            .then(restaurants => {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n                return uniqueNeighborhoods;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     * Error handling is in fetchCuisines().\r\n     */\r\n    static fetchCuisines() {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n            .then(restaurants => {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n                return uniqueCuisines;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`img/${restaurant.id}-600.jpg`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image srcset string.\r\n     */\r\n    static srcsetForRestaurant(restaurant) {\r\n        return (`img/webp/${restaurant.id}-400.webp 400w,\r\n      img/webp/${restaurant.id}-600.webp 600w,\r\n      img/webp/${restaurant.id}-800.webp 800w`);\r\n    }\r\n\r\n    /**\r\n     * Add map script to html\r\n     */\r\n    static addScript() {\r\n        const target = document.body;\r\n        const mapScript = document.createElement('script');\r\n        mapScript.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyCSQXjgi1K6hqDS4W3nWVK_z0lntlbLFPo&libraries=places&callback=initMap';\r\n        target.appendChild(mapScript);\r\n    }\r\n\r\n    static toggleMap(anchorID, mapElemID){\r\n        const anchor = document.getElementById(anchorID);\r\n        const mapFrame = document.getElementById(mapElemID);\r\n\r\n        anchor.addEventListener('click', (e) => {\r\n            // Prevent Default link behaviour\r\n            e.preventDefault();\r\n\r\n            // Check for map section\r\n            if (!mapFrame) return;\r\n\r\n            // Toggle map section visiblity\r\n            mapFrame.classList.toggle('is-visible');\r\n\r\n            // Fetch script only if it hasn't already been fetched\r\n            if (!window.google) {\r\n                DBHelper.addScript();\r\n            }\r\n\r\n        }, false);\r\n\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}"]}