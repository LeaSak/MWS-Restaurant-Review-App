{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","idb","open","upgradeDb","oldVersion","console","log","createObjectStore","keyPath","restaurants","createDatabase","idbPromise","db","transaction","objectStore","Promise","all","map","restaurant","store","put","catch","error","tx","abort","then","getAll","reviews","review","status","getRestaurantFromDB","response","setFavouriteStatus","addFavoriteStatustoDB","logError","get","resolve","reject","selectedRestaurant","is_favorite","Error","json","fetch","DATABASE_URL","validateJSON","ok","fetchRestaurantsFromDB","length","addRestaurantsToDB","id","fetchReviewsFromDB","fetchReviewsByIdFromNetwork","addReviewsToDB","cuisine","neighborhood","fetchRestaurants","results","filter","r","cuisine_type","neighborhoods","v","i","indexOf","cuisines","uniqueNeighborhoods","url","method","res","key","uniqueCuisines","document","addEventListener","updateButtonState","e","target","dataset","action","saveButton","restaurantId","pressed","labelText","getAttribute","setAttribute","options","body","JSON","stringify","mapScript","createElement","src","appendChild","anchorID","mapFrame","currentState","anchor","preventDefault","addScript","google","maps","Marker","latlng","urlForRestaurant"],"mappings":"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","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\n\r\nclass DBHelper {\r\n\r\n    /**\r\n     * Make an IndexedDB Database\r\n     */\r\n    static createDatabase() {\r\n        const idbPromise = idb.open('restaurants', 2, (upgradeDb) => {\r\n            switch (upgradeDb.oldVersion) {\r\n                case 0:\r\n                    // a placeholder case so that the switch block will\r\n                    // execute when the database is first created\r\n                    // (oldVersion is 0)\r\n                case 1:\r\n                    console.log('Creating the restaurants object store');\r\n                    upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\r\n\r\n                case 2:\r\n                    console.log('Creating the reviews object store');\r\n                    upgradeDb.createObjectStore('reviews', { keyPath: 'id' })\r\n            }\r\n        })\r\n\r\n        return idbPromise;\r\n    }\r\n\r\n    /**\r\n     * Add restaurants to the database\r\n     */\r\n    static addRestaurantsToDB(restaurants) {\r\n        return DBHelper.createDatabase()\r\n            .then((db) => {\r\n                if (!db) {\r\n                    return;\r\n                }\r\n                const tx = db.transaction('restaurants', 'readwrite');\r\n                const store = tx.objectStore('restaurants');\r\n\r\n                return Promise.all(restaurants.map(restaurant => {\r\n                    console.log('adding restaurants to database');\r\n                    return store.put(restaurant);\r\n                }));\r\n            })\r\n            .catch((error) => {\r\n                tx.abort();\r\n                console.error(error);\r\n            });\r\n\r\n    }\r\n\r\n    /**\r\n     * Get all restaurants from the database\r\n     */\r\n    static fetchRestaurantsFromDB() {\r\n        return DBHelper.createDatabase()\r\n            .then((db) => {\r\n                const tx = db.transaction('restaurants', 'readonly');\r\n                const store = tx.objectStore('restaurants');\r\n                return store.getAll();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Add reviews to the database\r\n     */\r\n    static addReviewsToDB(reviews) {\r\n        return DBHelper.createDatabase()\r\n            .then((db) => {\r\n                if (!db) {\r\n                    return;\r\n                }\r\n                const tx = db.transaction('reviews', 'readwrite');\r\n                const store = tx.objectStore('reviews');\r\n\r\n                return Promise.all(reviews.map(review => {\r\n                    console.log('adding reviews to database');\r\n                    return store.put(review);\r\n                }));\r\n\r\n            })\r\n            .catch((error) => {\r\n                tx.abort();\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Fetch reviews from database\r\n     */\r\n    static fetchReviewsFromDB() {\r\n        return DBHelper.createDatabase()\r\n            .then((db) => {\r\n                const tx = db.transaction('reviews', 'readonly');\r\n                const store = tx.objectStore('reviews');\r\n                return store.getAll();\r\n            });\r\n    }\r\n\r\n\r\n    /**\r\n     * Update favourite status in client side database\r\n     */\r\n    static updateFavouriteStatusinDB(restaurant, status) {\r\n        return DBHelper.createDatabase()\r\n            .then(db => DBHelper.getRestaurantFromDB(db, restaurant))\r\n            .then(response => DBHelper.setFavouriteStatus(response, status))\r\n            .then(response => DBHelper.addFavoriteStatustoDB(response))\r\n            .catch(DBHelper.logError);\r\n    }\r\n\r\n\r\n    static getRestaurantFromDB(db, restaurant) {\r\n        const tx = db.transaction('restaurants', 'readwrite');\r\n        const store = tx.objectStore('restaurants');\r\n        return store.get(restaurant);\r\n    }\r\n\r\n    static setFavouriteStatus(response, status) {\r\n        return new Promise((resolve, reject) => {\r\n            const selectedRestaurant = response;\r\n            selectedRestaurant.is_favorite = status;\r\n            resolve(selectedRestaurant);\r\n        });\r\n    }\r\n\r\n    static addFavoriteStatustoDB(response) {\r\n        return DBHelper.createDatabase()\r\n            .then((db) => {\r\n                const tx = db.transaction('restaurants', 'readwrite');\r\n                const store = tx.objectStore('restaurants');\r\n                return store.put(response);\r\n            })\r\n            .catch(DBHelper.logError);\r\n    }\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n\r\n    static get DATABASE_URL() {\r\n        const port = 1337; // Change this to your server port\r\n        return `http://localhost:${port}`;\r\n    }\r\n\r\n\r\n    static logError(error) {\r\n        console.error(error);\r\n    }\r\n\r\n    static validateJSON(response) {\r\n        if (!response.ok) {\r\n            throw Error(response.statusText);\r\n        }\r\n        return response.json();\r\n    }\r\n\r\n    static defineRestaurants(response) {\r\n        const restaurants = response;\r\n        console.log('Network contact');\r\n        return restaurants;\r\n    }\r\n\r\n    /**\r\n     * Go to network to get restaurants\r\n     */\r\n    static fetchRestaurantsFromNetwork() {\r\n        return fetch(DBHelper.DATABASE_URL + '/restaurants')\r\n            .then(DBHelper.validateJSON)\r\n            .then(DBHelper.defineRestaurants);\r\n    }\r\n\r\n    /**\r\n     * Fetch Restaurants without error handling\r\n     * Error Handling is in other functions\r\n     * Fetches restaurants from server\r\n     * Adds them to the database\r\n     * Returns dynamic request results\r\n     *\r\n     */\r\n\r\n    static fetchRestaurants() {\r\n        // First try to get results from Database\r\n        return DBHelper.fetchRestaurantsFromDB()\r\n            .then(function(response) {\r\n                // If the database is empty\r\n                // Go to the network\r\n                // Add network response to IndexedDB\r\n                if (response.length === 0) {\r\n                    return DBHelper.fetchRestaurantsFromNetwork()\r\n                        .then(response => {\r\n                            DBHelper.addRestaurantsToDB(response);\r\n                            return response;\r\n                        })\r\n                        .catch(DBHelper.logError);\r\n                }\r\n                return response;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Go to network to get reviews\r\n     */\r\n    static fetchReviewsByIdFromNetwork(id) {\r\n        return fetch(DBHelper.DATABASE_URL + `/reviews/?restaurant_id=${id}`)\r\n            .then(DBHelper.validateJSON)\r\n            .then(response => {\r\n                return response;\r\n            })\r\n\r\n    }\r\n\r\n    /**\r\n     * Fetch reviews from DB\r\n     * If no reviews, fetch from network\r\n     * add to database\r\n     */\r\n    static fetchReviewsById(id) {\r\n        return DBHelper.fetchReviewsFromDB()\r\n            .then(function(response) {\r\n                if (response.length === 0) {\r\n                    return DBHelper.fetchReviewsByIdFromNetwork(id)\r\n                        .then(response => {\r\n                            DBHelper.addReviewsToDB(response);\r\n                            return response;\r\n                        })\r\n                        .catch(DBHelper.logError);\r\n                }\r\n                return response;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     * Error handling is in window.initMap()\r\n     */\r\n    static fetchRestaurantById(id) {\r\n        return fetch(DBHelper.DATABASE_URL + '/restaurants/' + id)\r\n            .then(DBHelper.validateJSON)\r\n            .then((response) => {\r\n                return response;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood\r\n     * Error handling is in updateRestaurants().\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood) {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n            .then(restaurants => {\r\n                let results = restaurants;\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                return results;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods.\r\n     * Error handling is in fetchNeighboods().\r\n     */\r\n    static fetchNeighborhoods() {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n            .then(restaurants => {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n                return uniqueNeighborhoods;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     * Error handling is in fetchCuisines().\r\n     */\r\n    static fetchCuisines() {\r\n        // Fetch all restaurants\r\n        return DBHelper.fetchRestaurants()\r\n            .then(restaurants => {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n                return uniqueCuisines;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`img/${restaurant.id}-600.jpg`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image srcset string.\r\n     */\r\n    static srcsetForRestaurant(restaurant) {\r\n        return (`img/webp/${restaurant.id}-400.webp 400w,\r\n      img/webp/${restaurant.id}-600.webp 600w,\r\n      img/webp/${restaurant.id}-800.webp 800w`);\r\n    }\r\n\r\n    /**\r\n     * Update favorite status.\r\n     */\r\n    static addFavoriteStatus(id, status) {\r\n        let url = (`http://localhost:1337/restaurants/${id}/?is_favorite=${status}`);\r\n\r\n        return fetch(url, {\r\n                method: 'PUT',\r\n            })\r\n            .then(DBHelper.validateJSON)\r\n            .then((res) => {\r\n                let status = res.is_favorite;\r\n                let key = res.id;\r\n                DBHelper.updateFavouriteStatusinDB(key, status);\r\n\r\n            })\r\n            .catch(error => console.error('Error:', error))\r\n    }\r\n\r\n    /**\r\n     * Click handler to update favourite button aria labels.\r\n     */\r\n    static toggleButtonState() {\r\n        document.addEventListener('click', DBHelper.updateButtonState, false);\r\n    }\r\n\r\n    /**\r\n     * Toggles aria labels and aria pressed state\r\n     */\r\n    static updateButtonState(e) {\r\n        const Id = e.target.dataset.action;\r\n\r\n        if (!Id) {\r\n\r\n            return;\r\n\r\n        } else {\r\n\r\n            if (e.target.dataset.action === 'save') {\r\n                let saveButton = e.target;\r\n                let restaurantId = saveButton.dataset.restaurantId;\r\n                console.log(restaurantId);\r\n                let currentState = saveButton.getAttribute('aria-pressed');\r\n                let pressed = 'true';\r\n                let labelText = 'Remove from favourites';\r\n\r\n\r\n                if (currentState === 'true') {\r\n                    pressed = 'false';\r\n                    labelText = 'Add to favourites';\r\n                }\r\n\r\n                saveButton.setAttribute('aria-pressed', pressed);\r\n                saveButton.setAttribute('aria-label', labelText);\r\n\r\n                //post data about restaurant to Server and IndexedDB\r\n                DBHelper.addFavoriteStatus(restaurantId, pressed);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // submit review to server\r\n    // TOD0: update database\r\n    static postReviewtoServer(review) {\r\n        const url = DBHelper.DATABASE_URL + '/reviews';\r\n        const options = {\r\n            method: 'POST',\r\n            body: JSON.stringify(review)\r\n        }\r\n\r\n        fetch(url, options)\r\n        .then(DBHelper.validateJSON)\r\n        // TODO: Add to client side DB\r\n        .then(response => {\r\n                return response;\r\n            });\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Add map script to html\r\n     */\r\n    static addScript() {\r\n        const target = document.body;\r\n        const mapScript = document.createElement('script');\r\n        mapScript.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyCSQXjgi1K6hqDS4W3nWVK_z0lntlbLFPo&libraries=places&callback=initMap';\r\n        target.appendChild(mapScript);\r\n    }\r\n\r\n    static toggleMap(anchorID, mapElemID) {\r\n        const anchor = document.getElementById(anchorID);\r\n        const mapFrame = document.getElementById(mapElemID);\r\n\r\n        anchor.addEventListener('click', (e) => {\r\n            // Prevent Default link behaviour\r\n            e.preventDefault();\r\n\r\n            // Check for map section\r\n            if (!mapFrame) return;\r\n\r\n            // Toggle map section visiblity\r\n            mapFrame.classList.toggle('is-visible');\r\n\r\n            // Fetch script only if it hasn't already been fetched\r\n            if (!window.google) {\r\n                DBHelper.addScript();\r\n            }\r\n\r\n        }, false);\r\n\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}"]}