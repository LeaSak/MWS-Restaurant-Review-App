{"version":3,"sources":["main.js"],"names":["neighborhoods","restaurants","cuisines","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","DBHelper","error","self","fillNeighborhoodsHTML","arguments","length","undefined","select","getElementById","forEach","neighborhood","option","createElement","append","console","fillCuisinesHTML","cuisine","innerHTML","value","map","google","maps","Map","zoom","center","lng","scrollwheel","updateRestaurants","nSelect","cIndex","cSelect","selectedIndex","nIndex","fillRestaurantsHTML","resetRestaurants","markers","m","setMap","ul","restaurant","createRestaurantHTML","li","className","addMarkersToMap","image","src","imageUrlForRestaurant","sizes","srcset","srcsetForRestaurant","setAttribute","alt","imgBox","contentBox","name","address","more","href","urlForRestaurant","mapMarkerForRestaurant","addListener","marker","location","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines;\r\nvar map, markers = [];\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n  li.className = 'restaurant-list-item';\r\n\r\n  const imgBox = document.createElement('div');\r\n  imgBox.className = 'flex-card-img';\r\n  li.append(imgBox);\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.sizes = '(min-width: 600px) 50vw, (min-width: 960px) 33.33vw, 100vw';\r\n  image.srcset = DBHelper.srcsetForRestaurant(restaurant);\r\n  image.setAttribute('alt', restaurant.alt);\r\n  imgBox.append(image);\r\n\r\n  const contentBox = document.createElement('div');\r\n  contentBox.className = 'flex-card-content';\r\n  li.append(contentBox);\r\n\r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  name.className = 'restaurant-list-heading';\r\n  contentBox.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  neighborhood.className = 'neighborhood';\r\n  contentBox.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  address.className = 'address';\r\n  contentBox.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.className = 'restaurant-link';\r\n  more.innerHTML = 'View Venue';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  contentBox.append(more);\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url;\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n};\r\n"]}