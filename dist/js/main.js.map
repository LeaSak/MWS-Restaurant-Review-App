{"version":3,"sources":["main.js"],"names":["neighborhoods","restaurants","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","DBHelper","then","fillNeighborhoodsHTML","console","error","arguments","length","undefined","self","neighborhood","option","createElement","select","forEach","cuisines","fillCuisinesHTML","getElementById","cuisine","innerHTML","window","initMap","lat","google","maps","Map","lng","center","scrollwheel","map","iFrame","updateRestaurants","setAttribute","cSelect","nSelect","cIndex","selectedIndex","nIndex","value","resetRestaurants","fillRestaurantsHTML","textContent","markers","m","setMap","ul","restaurant","addMarkersToMap","createRestaurantHTML","li","className","imgBox","append","image","imageUrlForRestaurant","srcset","srcsetForRestaurant","alt","sizes","name","contentBox","address","more","marker","mapMarkerForRestaurant","addListener","href","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n    neighborhoods,  \r\n    cuisines; \r\nvar map, markers = [];\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods()\r\n  .then(neighborhoods => {\r\n    self.neighborhoods = neighborhoods;\r\n    fillNeighborhoodsHTML();\r\n  })\r\n  .catch(error => {\r\n    console.error(error);\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines()\r\n  .then(cuisines => {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n  })\r\n  .catch(error => {\r\n    console.error(error);\r\n  });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  \r\n  updateRestaurants();\r\n\r\n  let setTitle = () => {\r\n    const iFrame = document.querySelector('#map iframe');\r\n    iFrame.setAttribute('title', 'Map with markers for selected restaurants');\r\n  }\r\n  self.map.addListener('tilesloaded', setTitle);\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood)\r\n  .then(restaurants => {\r\n    resetRestaurants(restaurants);\r\n    fillRestaurantsHTML();\r\n  })\r\n  .catch(error => {\r\n    console.error(error);\r\n  });\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.textContent = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n  li.className = 'restaurant-list-item';\r\n\r\n  const imgBox = document.createElement('div');\r\n  imgBox.className = 'flex-card-img';\r\n  li.append(imgBox);\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.sizes = '(min-width: 600px) 50vw, (min-width: 960px) 33.33vw, 100vw';\r\n  image.srcset = DBHelper.srcsetForRestaurant(restaurant);\r\n  image.setAttribute('alt', restaurant.alt);\r\n  imgBox.append(image);\r\n\r\n  const contentBox = document.createElement('div');\r\n  contentBox.className = 'flex-card-content';\r\n  li.append(contentBox);\r\n\r\n  const name = document.createElement('h3');\r\n  name.textContent = restaurant.name;\r\n  name.className = 'restaurant-list-heading';\r\n  contentBox.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.textContent = restaurant.neighborhood;\r\n  neighborhood.className = 'neighborhood';\r\n  contentBox.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.textContent = restaurant.address;\r\n  address.className = 'address';\r\n  contentBox.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.className = 'restaurant-link';\r\n  more.textContent = 'View Venue';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  contentBox.append(more);\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url;\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n};\r\n"]}