{"version":3,"sources":["main.js"],"names":["neighborhoods","restaurants","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","DBHelper","error","self","fillNeighborhoodsHTML","arguments","length","undefined","select","getElementById","forEach","neighborhood","option","createElement","append","cuisines","console","fillCuisinesHTML","cuisine","innerHTML","value","setTitle","google","maps","zoom","iFrame","lat","lng","scrollwheel","updateRestaurants","addListener","querySelector","setAttribute","cSelect","cIndex","selectedIndex","nIndex","nSelect","fillRestaurantsHTML","resetRestaurants","markers","m","setMap","ul","restaurant","createRestaurantHTML","li","className","addMarkersToMap","image","src","imageUrlForRestaurant","sizes","srcset","srcsetForRestaurant","alt","imgBox","contentBox","name","address","more","href","urlForRestaurant","mapMarkerForRestaurant","map","marker","location","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n    neighborhoods,  \r\n    cuisines; \r\nvar map, markers = [];\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let setTitle = () => {\r\n    const iFrame = document.querySelector('#map iframe');\r\n    iFrame.setAttribute('title', 'Map with markers for selected restaurants');\r\n  }\r\n  \r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n  self.map.addListener('tilesloaded', setTitle);\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n  li.className = 'restaurant-list-item';\r\n\r\n  const imgBox = document.createElement('div');\r\n  imgBox.className = 'flex-card-img';\r\n  li.append(imgBox);\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.sizes = '(min-width: 600px) 50vw, (min-width: 960px) 33.33vw, 100vw';\r\n  image.srcset = DBHelper.srcsetForRestaurant(restaurant);\r\n  image.setAttribute('alt', restaurant.alt);\r\n  imgBox.append(image);\r\n\r\n  const contentBox = document.createElement('div');\r\n  contentBox.className = 'flex-card-content';\r\n  li.append(contentBox);\r\n\r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  name.className = 'restaurant-list-heading';\r\n  contentBox.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  neighborhood.className = 'neighborhood';\r\n  contentBox.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  address.className = 'address';\r\n  contentBox.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.className = 'restaurant-link';\r\n  more.innerHTML = 'View Venue';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  contentBox.append(more);\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url;\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n};\r\n"]}