{"version":3,"sources":["main.js"],"names":["neighborhoods","restaurants","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","DBHelper","then","fillNeighborhoodsHTML","arguments","length","undefined","self","getElementById","neighborhood","option","createElement","select","forEach","cuisines","fillCuisinesHTML","cuisine","window","initMap","lat","google","maps","Map","lng","center","scrollwheel","map","iFrame","updateRestaurants","setAttribute","cSelect","nSelect","cIndex","selectedIndex","nIndex","value","resetRestaurants","fillRestaurantsHTML","textContent","markers","m","setMap","innerHTML","restaurant","createRestaurantHTML","join","myLazyLoad","addMarkersToMap","restaurantHTML","imageUrlForRestaurant","srcsetForRestaurant","name","address","urlForRestaurant","push","marker","mapMarkerForRestaurant","addListener","location","href","url"],"mappings":"aAAA,IACIA,IADAC,iBAAAA,EACAD,mBAAAA,EADAC,cAAAA,EACAD,WAIJE,SAAAC,iBAAA,mBAAA,SAAAC,GAIIC,qBACAC,kBAGJ,IAAAD,mBAAA,WAIIE,SAASF,qBACJG,KAAK,SAAAR,GAFRK,KAAAA,cAAqBL,EACvBO,0BAGQE,MAAAA,SAAAA,WAQNA,sBAAwB,WAAwC,IAAvCT,EAAuC,EAAAU,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvBG,KAAKb,cAA9CS,EAAAA,SAAwBK,eAAxBL,wBAAgET,EAAvCA,QAAuC,SAAAe,GAG9D,IAAMC,EAASd,SAASe,cAAc,UAFpCC,EAAAA,YAAkBJ,EACxBd,EAAAA,MAAcmB,EACVD,EAAMF,OAASd,MAOvBI,cAAA,WAIIC,SAASD,gBACJE,KAAK,SAAAY,GAFRd,KAAAA,SAAgBc,EAClBb,qBAGQc,MAAAA,SAAAA,WAQNA,iBAAmB,WAA8B,IAA7BD,EAA6B,EAAAV,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlBG,KAAKO,SAApCC,EAAAA,SAAmBP,eAAnBO,mBAAiDD,EAA7BA,QAA6B,SAAAE,GAG/C,IAAMN,EAASd,SAASe,cAAc,UAFpCC,EAAAA,YAAkBJ,EACxBM,EAASD,MAAQG,EACbJ,EAAMF,OAASd,MAOvBqB,OAAAC,QAAA,WAKQC,KAAAA,IAAK,IAAAC,OADCC,KAAAC,IAAA1B,SAAAY,eAAA,QAENe,KAAM,GAFVC,QACIL,IAAK,UAFND,KAAP,WAKIX,aAAea,IAGXK,oBAMAlB,KAAAmB,IAAMC,YAAS/B,cADJ,WAFfgC,SAAAA,cAAAA,eAIWC,aAAa,QAAS,gDAKrC,IAAAD,kBAAA,WAII,IAAME,EAAUlC,SAASY,eAAe,mBAClCuB,EAAUnC,SAASY,eAAe,wBADlCsB,EAAUlC,EAASY,cACnBuB,EAAUnC,EAASY,cAEnBwB,EAASF,EAAQG,GAAAA,MACjBC,EAAiBD,EAAAA,GAAvBE,MAEAlC,SAAMe,wCAANA,EAAAP,GACMA,KAAAA,SAAAA,GAIE2B,iBAAiBzC,GAFzBM,wBAGQoC,MAAAA,SAAAA,WAQND,iBAAmB,SAACzC,GACtBY,KAAAZ,eACKA,SAAca,eAAnB,oBACA8B,YAAW1C,GAGXW,KAAAgC,QAAA1B,QAAA,SAAA2B,GAAA,OAAAA,EAAAC,OAAA,QACAlC,KAAKgC,WAAgBhC,KAAAZ,YAAKA,GAK9B0C,oBAAA,WAAA,IAAA1C,EAAA,EAAAS,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAAG,KAAAZ,YAIeC,SAASY,eAAe,oBAChCkC,UAAY/C,EAAY+B,IAAI,SAAAiB,GAAA,OAAcC,qBAAqBD,KAAaE,KAAK,IAFlFR,kBAA0DS,WAAnCnD,UAGzBoD,qBAAAA,SAAAA,GA0BA,MA7BJC,2IAgBwB/C,SAASgD,sBAAsBN,GAhBvD,gHAkB2B1C,SAASiD,oBAAoBP,GAlBxD,wBAYUK,EAAAA,IAZV,gHAUAL,EAAAQ,KAVA,8CAuBsCR,EAAWlC,aAvBjD,wCAgCAkC,EAAAS,QAhCA,8BAyBuBnD,SAASoD,iBAAiBV,GAzBjD,wEAyCSI,gBAFD,YAAA,EAAA3C,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAAG,KAAAZ,aAGK4C,QAAQe,SAAAA,GAPrB,IAAAC,EAAAtD,SAAAuD,uBAAAb,EAAApC,KAAAmB,KAIQN,OAAOC,KAAKvB,MAAM2D,YAAYF,EAAQ,QAAS,WAC3CtC,OAAOyC,SAASC,KAAOJ,EAAOK,MAElCrD,KAAKgC,QAAQe,KAAKC","file":"main.js","sourcesContent":["let restaurants,\r\n    neighborhoods,\r\n    cuisines;\r\nvar map, markers = [];\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n    DBHelper.fetchNeighborhoods()\r\n        .then(neighborhoods => {\r\n            self.neighborhoods = neighborhoods;\r\n            fillNeighborhoodsHTML();\r\n        })\r\n        .catch(DBHelper.logError);\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n    const select = document.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n        const option = document.createElement('option');\r\n        option.textContent = neighborhood;\r\n        option.value = neighborhood;\r\n        select.append(option);\r\n    });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n    DBHelper.fetchCuisines()\r\n        .then(cuisines => {\r\n            self.cuisines = cuisines;\r\n            fillCuisinesHTML();\r\n        })\r\n        .catch(DBHelper.logError);\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n    const select = document.getElementById('cuisines-select');\r\n    cuisines.forEach(cuisine => {\r\n        const option = document.createElement('option');\r\n        option.textContent = cuisine;\r\n        option.value = cuisine;\r\n        select.append(option);\r\n    });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n    let loc = {\r\n        lat: 40.722216,\r\n        lng: -73.987501\r\n    };\r\n    self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 12,\r\n        center: loc,\r\n        scrollwheel: false\r\n    });\r\n\r\n    updateRestaurants();\r\n\r\n    let setTitle = () => {\r\n        const iFrame = document.querySelector('#map iframe');\r\n        iFrame.setAttribute('title', 'Map with markers for selected restaurants');\r\n    }\r\n    self.map.addListener('tilesloaded', setTitle);\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n    const cSelect = document.getElementById('cuisines-select');\r\n    const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood)\r\n        .then(restaurants => {\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n        })\r\n        .catch(DBHelper.logError);\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.textContent = '';\r\n\r\n    // Remove all map markers\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n    self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = restaurants.map(restaurant => createRestaurantHTML(restaurant)).join('');\r\n    addMarkersToMap();\r\n    myLazyLoad.update();\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n\r\n    const restaurantHTML =\r\n        `<li class=\"restaurant-list-item\">\r\n        <div class=\"flex-card-img\">\r\n            <img class=\"restaurant-img\" \r\n            data-src=\"${DBHelper.imageUrlForRestaurant(restaurant)}\" \r\n            sizes=\"(min-width: 600px) 50vw, (min-width: 960px) 33.33vw, 100vw\"\r\n            data-srcset=\"${DBHelper.srcsetForRestaurant(restaurant)}\" \r\n            alt=\"${restaurant.alt}\">\r\n        </div>\r\n        <div class=\"flex-card-content\">\r\n            <h3 class=\"restaurant-list-heading\">${restaurant.name}</h3>\r\n            <p class=\"neighborhood\">${restaurant.neighborhood}</p>\r\n            <p class=\"address\">${restaurant.address}</p>\r\n            <a href=\"${DBHelper.urlForRestaurant(restaurant)}\" class=\"restaurant-link\">View Venue</a>\r\n        </div> \r\n    </li>`;\r\n\r\n    return restaurantHTML;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n    restaurants.forEach(restaurant => {\r\n        // Add marker to the map\r\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n        google.maps.event.addListener(marker, 'click', () => {\r\n            window.location.href = marker.url;\r\n        });\r\n        self.markers.push(marker);\r\n    });\r\n};"]}