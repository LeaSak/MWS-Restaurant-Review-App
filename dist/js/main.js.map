{"version":3,"sources":["main.js"],"names":["neighborhoods","restaurants","cuisines","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","DBHelper","error","self","fillNeighborhoodsHTML","arguments","length","undefined","select","getElementById","forEach","neighborhood","option","createElement","append","console","fillCuisinesHTML","cuisine","innerHTML","value","map","google","maps","Map","zoom","center","lat","lng","window","updateRestaurants","addListener","querySelector","setAttribute","scrollwheel","selectedIndex","cSelect","cIndex","nSelect","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","markers","m","setMap","ul","restaurant","createRestaurantHTML","addMarkersToMap","li","className","imgBox","image","sizes","srcset","srcsetForRestaurant","alt","contentBox","name","imageUrlForRestaurant","address","more","urlForRestaurant","marker","mapMarkerForRestaurant","href","url"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines;\r\nvar map, markers = [];\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let setTitle = () => document.querySelector('#map iframe').setAttribute('title', 'Map with markers for selected restaurants');\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n  self.map.addListener('tilesloaded', setTitle);\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n  li.className = 'restaurant-list-item';\r\n\r\n  const imgBox = document.createElement('div');\r\n  imgBox.className = 'flex-card-img';\r\n  li.append(imgBox);\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.sizes = '(min-width: 600px) 50vw, (min-width: 960px) 33.33vw, 100vw';\r\n  image.srcset = DBHelper.srcsetForRestaurant(restaurant);\r\n  image.setAttribute('alt', restaurant.alt);\r\n  imgBox.append(image);\r\n\r\n  const contentBox = document.createElement('div');\r\n  contentBox.className = 'flex-card-content';\r\n  li.append(contentBox);\r\n\r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  name.className = 'restaurant-list-heading';\r\n  contentBox.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  neighborhood.className = 'neighborhood';\r\n  contentBox.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  address.className = 'address';\r\n  contentBox.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.className = 'restaurant-link';\r\n  more.innerHTML = 'View Venue';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  contentBox.append(more);\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url;\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n};\r\n"]}