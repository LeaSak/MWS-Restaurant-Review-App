{"version":3,"sources":["main.js"],"names":["neighborhoods","restaurants","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","DBHelper","then","fillNeighborhoodsHTML","arguments","length","undefined","self","getElementById","neighborhood","option","createElement","select","forEach","cuisines","fillCuisinesHTML","cuisine","showMap","mapBtn","mapFrame","contains","e","preventDefault","toggle","classList","addScript","window","initMap","map","google","maps","Map","zoom","loc","lat","center","updateRestaurants","addListener","setTitle","iFrame","querySelector","cSelect","cIndex","selectedIndex","value","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","catch","logError","ul","textContent","console","markers","setMap","m","innerHTML","restaurant","createRestaurantHTML","join","restaurantHTML","imageUrlForRestaurant","name","address","urlForRestaurant","push","marker","mapMarkerForRestaurant","location","href","url"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n    neighborhoods,\r\n    cuisines;\r\nvar map, markers = [];\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n    updateRestaurants();\r\n    DBHelper.toggleMap('map-btn', 'map-cell');\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n    DBHelper.fetchNeighborhoods()\r\n        .then(neighborhoods => {\r\n            self.neighborhoods = neighborhoods;\r\n            fillNeighborhoodsHTML();\r\n        })\r\n        .catch(DBHelper.logError);\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n    const select = document.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n        const option = document.createElement('option');\r\n        option.textContent = neighborhood;\r\n        option.value = neighborhood;\r\n        select.append(option);\r\n    });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n    DBHelper.fetchCuisines()\r\n        .then(cuisines => {\r\n            self.cuisines = cuisines;\r\n            fillCuisinesHTML();\r\n        })\r\n        .catch(DBHelper.logError);\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n    const select = document.getElementById('cuisines-select');\r\n    cuisines.forEach(cuisine => {\r\n        const option = document.createElement('option');\r\n        option.textContent = cuisine;\r\n        option.value = cuisine;\r\n        select.append(option);\r\n    });\r\n};\r\n\r\nconst showMap = () => {\r\n    const mapBtn = document.getElementById('map-btn');\r\n    const mapFrame = document.getElementById('map-cell');\r\n\r\n    mapBtn.addEventListener('click', (e) => {\r\n\r\n        // Check we've clicked on the right target\r\n        if (!e.target.classList.contains('toggle')) return;\r\n\r\n        // Prevent Default link behaviour\r\n        e.preventDefault();\r\n\r\n        // Check for map section\r\n        if (!mapFrame) return;\r\n\r\n        // Toggle map section visiblity\r\n        mapFrame.classList.toggle('is-visible');\r\n\r\n        // Fetch script only if it hasn't already been fetched\r\n        if (!window.google) {\r\n            DBHelper.addScript();\r\n        }\r\n\r\n    }, false);\r\n}\r\n\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n    let loc = {\r\n        lat: 40.722216,\r\n        lng: -73.987501\r\n    };\r\n    self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 12,\r\n        center: loc,\r\n        scrollwheel: false\r\n    });\r\n\r\n    updateRestaurants();\r\n\r\n    let setTitle = () => {\r\n        const iFrame = document.querySelector('#map iframe');\r\n        iFrame.setAttribute('title', 'Map with markers for selected restaurants');\r\n    }\r\n    self.map.addListener('tilesloaded', setTitle);\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n    const cSelect = document.getElementById('cuisines-select');\r\n    const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood)\r\n        .then(restaurants => {\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n        })\r\n        .catch(DBHelper.logError);\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.textContent = '';\r\n\r\n    // Remove all map markers if map\r\n    if (map) {\r\n        console.log(\"markers deleted\");\r\n        self.markers.forEach(m => m.setMap(null));\r\n        self.markers = [];\r\n    }\r\n\r\n    self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = restaurants.map(restaurant => createRestaurantHTML(restaurant)).join('');\r\n    if (window.google) {\r\n        addMarkersToMap();\r\n    }\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n\r\n    const restaurantHTML =\r\n        `<li class=\"restaurant-list-item\">\r\n        <picture class=\"flex-card-img\">\r\n            <source data-srcset=\"${DBHelper.srcsetForRestaurant(restaurant)}\" \r\n            class=\"restaurant-img lazyload\" data-sizes=\"auto\" type=\"image/webp\">\r\n            <img class=\"restaurant-img lazyload\" \r\n            data-src=\"${DBHelper.imageUrlForRestaurant(restaurant)}\" alt=\"Photo of ${restaurant.name}\">\r\n        </picture>\r\n        <div class=\"flex-card-content\">\r\n            <h3 class=\"restaurant-list-heading\">${restaurant.name}</h3>\r\n            <p class=\"neighborhood\">${restaurant.neighborhood}</p>\r\n            <p class=\"address\">${restaurant.address}</p>\r\n            <a href=\"${DBHelper.urlForRestaurant(restaurant)}\" class=\"restaurant-link\">View Venue</a>\r\n        </div> \r\n    </li>`;\r\n\r\n    return restaurantHTML;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n    restaurants.forEach(restaurant => {\r\n        // Add marker to the map\r\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n        google.maps.event.addListener(marker, 'click', () => {\r\n            window.location.href = marker.url;\r\n        });\r\n        self.markers.push(marker);\r\n    });\r\n};"]}