{"version":3,"sources":["sw.js"],"names":["importScripts","CACHE_IMAGES","STATIC_ASSETS","self","event","sendMessagetoSW","message","clients","matchAll","then","console","log","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","postMessage","err","return","servePhoto","request","storageUrl","url","replace","caches","open","cache","match","response","fetch","networkResponse","put","clone","addEventListener","waitUntil","CACHE_NAME","addAll","requestUrl","respondWith","claim","URL","origin","location","pathname","startsWith","method","client","tag"],"mappings":"aAAAA,cAAc,yBAAdA,IAAAA,WAAc,oBAGRC,aAAe,2BAAfA,cAAe,CAGjB,IADEC,kBAGF,mBAWJ,yBACAC,iBACIC,aAEQ,gBACH,wBAJT,uBALI,6BAYJD,8EA0DuB,SAAAE,gBAAAC,GAAAC,QAAAC,WAAAC,KAAA,SAAAF,GAAAG,QAAAC,IAAA,mBAAA,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAAA,IAAA,IAAAC,EAAAC,EAAAV,EAAAW,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAA,CAAAI,EAAAM,MAAAC,YAAAjB,IAAA,MAAAkB,GAAAX,GAAA,EAAAC,EAAAU,EAAA,QAAA,KAAAZ,GAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,QAAA,GAAAZ,EAAA,MAAAC,MAAA,SAAAY,WAAAC,GAAA,IAAAC,EAAAD,EAAAE,IAAAC,QAAA,eAAA,IAMtB,OAAAC,OAAAC,KAAA/B,cAAAQ,KAAA,SAAAwB,GAMO,OAAOA,EAAMC,MAAMN,GAAYnB,KAAK,SAAA0B,GAJnCT,OAAAA,GAOUU,MAAMT,GAASlB,KAAK,SAAA4B,GAHxBJ,OADJF,EAAAO,IAAYrC,EAAcQ,EAAK8B,SACrBL,QAlEhB/B,KAAAqC,iBAAA,UAAA,SAAApC,GAJLA,EAAAqC,UALQV,OAAOC,KAAKU,YAAYjC,KAAK,SAACwB,GAajCO,OAAAA,EAAiBG,OAASzC,oBAIvBC,KAAAqC,iBAAA,WAAA,SAAApC,GACAM,QAAIkC,IAAAA,gBACAxC,KAAAA,SAAMyC,QAAYd,OAClBxB,QAAAuC,UAKA1C,KAAAA,iBAAMyC,QAAYnB,SAAAA,GAClB,IAAAkB,EAAA,IAAAG,IAAA3C,EAAAuB,QAAAE,KACH,GAAAe,EAAAI,SAAAC,SAAAD,OAAA,CAIL,GAAA,MAAAJ,EAAAM,SAXQ,YAYJ9C,EAAMuB,YAANI,OAAyBG,MAAO,MAKpC,GAAAU,EAAAM,SAAAC,WAAA,SAGQ,YAFFN,EAAAA,YACKb,WAAKU,EAAYjC,UACpB,QAMCL,EANDuB,QAAAyB,QAaZjD,EAAKqC,YACD9B,OAAAsB,KAAYU,YAAZjC,KAAA,SAAAwB,GACG7B,OAAA6B,EAAaC,MAAA9B,EAAcuB,SAAAlB,KAAA,SAAA0B,GAClBxB,OAAIwB,GAAAC,MAAZhC,EAAAuB,SAAAlB,KAAA,SAAA0B,GAHR,OAIcM,QAAUpC,IAAAA,GACnB4B,EAAAK,IAAAlC,EAAAuB,QAAAQ,EAAAI,SALLJ,WAUuBhC,KAAAqC,iBAAA,OAAA,SAAApC,GAEfM,QAAAC,IAAA,eAAW0C,eAAmBjD,EAAAkD,MAT9B5C,QAAQC,IAAI,oBAUR0C,EAAAA,UAAO9B,gBAAYjB,CAAnBA,QAAA","file":"sw.js","sourcesContent":["importScripts('/js/vendor/idb.min.js');\n\nconst CACHE_NAME = 'restaurant-app-v1';\nconst CACHE_IMAGES = 'restaurant-app-images-v1';\n\nconst STATIC_ASSETS = [\n    '/',\n    'restaurant.html',\n    'css/app-main.css',\n    'css/app-restaurant.css',\n    'js/dbhelper.js',\n    'js/main.js',\n    'js/offline.js',\n    'js/restaurant_info.js',\n    'js/vendor/idb.min.js',\n    'js/vendor/lazysizes.min.js',\n    'https://fonts.googleapis.com/css?family=Work+Sans:400,500\" rel=\"stylesheet'\n];\n\n// Cache static assets on install\nself.addEventListener('install', (event) => {\n    event.waitUntil(\n        caches.open(CACHE_NAME).then((cache) => {\n            return cache.addAll(STATIC_ASSETS);\n        }));\n});\n\nself.addEventListener('activate', function(event) {\n    console.log('SW activated');\n    if (self.clients && clients.claim) {\n        clients.claim();\n    }\n});\n\n\nself.addEventListener('fetch', (event) => {\n    const requestUrl = new URL(event.request.url);\n    if (requestUrl.origin === location.origin) {\n\n        // index.html\n        if (requestUrl.pathname === '/') {\n            event.respondWith(caches.match('/'));\n            return;\n        }\n\n        // add images to photo cache\n        if (requestUrl.pathname.startsWith('/img/')) {\n            event.respondWith(servePhoto(event.request));\n            return;\n        }\n\n    }\n\n    // Don't cache PUT/POST requests\n    if (event.request.method !== 'GET') return;\n\n    // cache default method\n    // https://jakearchibald.com/2014/offline-cookbook/#on-network-response\n    // If the request is in the cache, return it\n    // else go to the network, cache the response and return it at the same time\n    event.respondWith(\n        caches.open(CACHE_NAME).then(cache => {\n            return cache.match(event.request).then(response => {\n                return response || fetch(event.request).then(response => {\n                    console.log(response);\n                    cache.put(event.request, response.clone());\n                    return response;\n                });\n            });\n        })\n    );\n});\n\n//Listens for a sync event,\n// post messages to client\nself.addEventListener('sync', (event) => {\n    console.log('firing sync');\n    if(event.tag == 'review-sync'){\n        console.log('sync event fired');\n        event.waitUntil(sendMessagetoSW({ message: 'post-reviews'}));\n    }\n});\n\nfunction sendMessagetoSW(message){\n    clients.matchAll()\n    .then((clients) => {\n        console.log('sending Message');\n        for (const client of clients) {\n            client.postMessage(message);\n        }\n    });\n}\n\nfunction servePhoto(request) {\n    var storageUrl = request.url.replace(/-\\d+\\.[^.]+$/, '');\n\n    return caches.open(CACHE_IMAGES).then(cache => {\n        return cache.match(storageUrl).then(response => {\n            if (response) return response;\n\n            return fetch(request).then(networkResponse => {\n                cache.put(storageUrl, networkResponse.clone());\n                return networkResponse;\n            });\n        });\n    });\n}"]}