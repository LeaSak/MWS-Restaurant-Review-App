{"version":3,"sources":["sw.js"],"names":["importScripts","CACHE_IMAGES","STATIC_ASSETS","self","event","sendMessagetoSW","message","clients","fetch","cache","forEach","networkResponse","postMessage","servePhoto","request","storageUrl","url","replace","caches","open","then","match","response","put","clone","addEventListener","waitUntil","requestUrl","respondWith","startsWith","origin","location","pathname","method","log"],"mappings":"aAAAA,cAAc,yBAAdA,IAAAA,WAAc,oBAGRC,aAAe,2BAAfA,cAAe,CAGjB,IADEC,kBAGF,mBAUJ,yBACAC,iBACIC,aAEQ,wBACH,uBAJT,6BAJI,8EA2DJ,SAASC,gBAAgBC,GAcb,OAAAC,QAAOC,WACHC,KAAAA,SAAAA,GACAF,EAAAG,QAAOC,SAAAA,GAAAA,OAAAA,EAAPC,YAAAN,OAIf,SAAAO,WAAAC,GAZG,IAAIC,EAAaD,EAAQE,IAAIC,QAAQ,eAAgB,IAErD,OAAOC,OAAOC,KAAKlB,cAAcmB,KAAK,SAAAX,GAClC,OAAOA,EAAMY,MAAMN,GAAYK,KAAK,SAAAE,GAChC,OAAIA,GAEGd,MAAMM,GAASM,KAAK,SAAAT,GAEvB,OADAF,EAAMc,IAAIR,EAAYJ,EAAgBa,SAC/Bb,QAvEvBR,KAAKsB,iBAAiB,UAAW,SAACrB,GAY1BA,EAAAsB,UACAR,OAAIS,KAAAA,YAAAP,KAAwB,SAAAX,GACxBL,OAAMwB,EAAAA,OAAYV,oBAKtBf,KAAAsB,iBAAIE,QAAA,SAAoBE,GACpBzB,IAAAA,EAAMwB,IAAAA,IAAYf,EAAAA,QAAWT,KAC7B,GAAAuB,EAAAG,SAAAC,SAAAD,OAAA,CARJ,GAA4B,MAAxBH,EAAWK,SAcf5B,YADJA,EAAAwB,YAAAV,OAAAG,MAAA,MAKA,GAAAM,EAAAK,SAAAH,WAAA,SAEMD,YADNxB,EAAAwB,YAAAf,WAAAT,EAAAU,UAIY,QAICV,EAJDU,QAAAmB,QAWhB7B,EAAAwB,YACKH,OAAAA,KAAAA,YAAyBL,KAAA,SAAAX,GACvBL,OAAAK,EAAcY,MAAAjB,EAAcU,SAAAM,KAAA,SAAAE,GACnBY,OAAIZ,GAAAd,MAAAJ,EAAZU,SAAAM,KAAA,SAAAE,GAFR,OAGcI,QAAUrB,IAAAA,GACnBI,EAAAc,IAAAnB,EAAAU,QAAAQ,EAAAE,SAJLF,WAAAnB,KAAKsB,iBAAiB,OAAQ,SAACrB,GAcXU,gBAApBV,EAASS,MACDE,QAAAA,IAAAA,6BAZAX,EAAMsB,UAAUrB,gBAAgB,CAAEC,QAAS","file":"sw.js","sourcesContent":["importScripts('/js/vendor/idb.min.js');\n\nconst CACHE_NAME = 'restaurant-app-v1';\nconst CACHE_IMAGES = 'restaurant-app-images-v1';\n\nconst STATIC_ASSETS = [\n    '/',\n    'restaurant.html',\n    'css/app-main.css',\n    'css/app-restaurant.css',\n    'js/dbhelper.js',\n    'js/main.js',\n    'js/restaurant_info.js',\n    'js/vendor/idb.min.js',\n    'js/vendor/lazysizes.min.js',\n    'https://fonts.googleapis.com/css?family=Work+Sans:400,500\" rel=\"stylesheet'\n];\n\n// Cache static assets on install\nself.addEventListener('install', (event) => {\n    event.waitUntil(\n        caches.open(CACHE_NAME).then((cache) => {\n            return cache.addAll(STATIC_ASSETS);\n        }));\n});\n\n\nself.addEventListener('fetch', (event) => {\n    const requestUrl = new URL(event.request.url);\n    if (requestUrl.origin === location.origin) {\n\n        // index.html\n        if (requestUrl.pathname === '/') {\n            event.respondWith(caches.match('/'));\n            return;\n        }\n\n        // add images to photo cache\n        if (requestUrl.pathname.startsWith('/img/')) {\n            event.respondWith(servePhoto(event.request));\n            return;\n        }\n\n    }\n\n    // Don't cache PUT/POST requests\n    if (event.request.method !== 'GET') return;\n\n    // cache default method\n    // https://jakearchibald.com/2014/offline-cookbook/#on-network-response\n    // If the request is in the cache, return it\n    // else go to the network, cache the response and return it at the same time\n    event.respondWith(\n        caches.open(CACHE_NAME).then(cache => {\n            return cache.match(event.request).then(response => {\n                return response || fetch(event.request).then(response => {\n                    console.log(response);\n                    cache.put(event.request, response.clone());\n                    return response;\n                });\n            });\n        })\n    );\n});\n\n//Listens for a sync event,\n// post messages to client\nself.addEventListener('sync', (event) => {\n    if(event.tag === 'review-sync'){\n        console.log('sync event received by sw');\n        event.waitUntil(sendMessagetoSW({ message: 'post-reviews'}));\n    }\n});\n\nfunction sendMessagetoSW(message){\n    return clients.matchAll()\n    .then((clients) => {\n        clients.forEach(client => client.postMessage(message));\n    })\n}\n\nfunction servePhoto(request) {\n    var storageUrl = request.url.replace(/-\\d+\\.[^.]+$/, '');\n\n    return caches.open(CACHE_IMAGES).then(cache => {\n        return cache.match(storageUrl).then(response => {\n            if (response) return response;\n\n            return fetch(request).then(networkResponse => {\n                cache.put(storageUrl, networkResponse.clone());\n                return networkResponse;\n            });\n        });\n    });\n}"]}