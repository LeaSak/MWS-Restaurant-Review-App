{"version":3,"sources":["sw.js"],"names":["importScripts","CACHE_IMAGES","STATIC_ASSETS","self","event","sendMessagetoSW","request","cache","then","clients","forEach","client","postMessage","message","servePhoto","storageUrl","url","replace","caches","open","match","response","fetch","networkResponse","put","clone","addEventListener","waitUntil","respondWith","addAll","requestUrl","URL","origin","location","pathname","startsWith","CACHE_NAME","method","tag","console","log"],"mappings":"aAAAA,cAAc,yBAAdA,IAAAA,WAAc,oBAGRC,aAAe,2BAAfA,cAAe,CAGjB,IADEC,kBAGF,mBAWJ,yBACAC,iBACIC,aAEQ,gBACH,wBAJT,uBALI,6BAaJD,8EA6DY,SAAAE,gBAAaC,GACTC,OAAAA,QAAAA,WACAC,KAAA,SAAAC,GACHA,EAHDC,QAAA,SAAAC,GAAA,OAAAA,EAAAC,YAAAC,OAPZ,SAASC,WAAWR,GAChB,IAAIS,EAAaT,EAAQU,IAAIC,QAAQ,eAAgB,IAErD,OAAOC,OAAOC,KAAKlB,cAAcO,KAAK,SAAAD,GAClC,OAAOA,EAAMa,MAAML,GAAYP,KAAK,SAAAa,GAChC,OAAIA,GAEGC,MAAMhB,GAASE,KAAK,SAAAe,GAEvB,OADAhB,EAAMiB,IAAIT,EAAYQ,EAAgBE,SAC/BF,QA3DfpB,KAAAuB,iBAAA,UAAA,SAAAtB,GACAA,EAAAuB,UACIvB,OAAAA,KAAMwB,YAAYV,KAAOE,SAAAA,GACzB,OAAAb,EAAAsB,OAAA3B,oBAKAE,KAAAA,iBAAMwB,QAAYd,SAAAA,GAClB,IAAAgB,EAAA,IAAAC,IAAA3B,EAAAE,QAAAU,KACH,GAAAc,EAAAE,SAAAC,SAAAD,OAAA,CAIL,GAAA,MAAAF,EAAAI,SAXQ,YAYJ9B,EAAME,YAANY,OAAyBE,MAAO,MAKpC,GAAAU,EAAAI,SAAAC,WAAA,SAGQ,YAFFP,EAAAA,YACKT,WAAKiB,EAAY5B,UACpB,QAMCJ,EANDE,QAAA+B,QAaZlC,EAAKuB,YACEtB,OAAMkC,KAANF,YAAc5B,KAAc,SAAAD,GAC3BgC,OAAAhC,EAAYa,MAAAhB,EAAAE,SAAAE,KAAZ,SAAAa,GACMM,OAANN,GAAgBhB,MAAgBD,EAAES,SAASL,KAAA,SAAAa,GAZ/B,OAafkB,QAAAC,IAAAnB,GAJLd,EAAAiB,IAAApB,EAAAE,QAAAe,EAAAI,SAT2BJ,WAuB3BlB,KAAAuB,iBAAoBpB,OAAS,SAAAF,GACRE,gBAAjBF,EAAIW,MAbAwB,QAAQC,IAAI,6BAehBpC,EAAOc,UAAYjB,gBAAcO,CAAKK,QAAA","file":"sw.js","sourcesContent":["importScripts('/js/vendor/idb.min.js');\n\nconst CACHE_NAME = 'restaurant-app-v1';\nconst CACHE_IMAGES = 'restaurant-app-images-v1';\n\nconst STATIC_ASSETS = [\n    '/',\n    'restaurant.html',\n    'css/app-main.css',\n    'css/app-restaurant.css',\n    'js/dbhelper.js',\n    'js/main.js',\n    'js/offline.js',\n    'js/restaurant_info.js',\n    'js/vendor/idb.min.js',\n    'js/vendor/lazysizes.min.js',\n    'https://fonts.googleapis.com/css?family=Work+Sans:400,500\" rel=\"stylesheet'\n];\n\n// Cache static assets on install\nself.addEventListener('install', (event) => {\n    event.waitUntil(\n        caches.open(CACHE_NAME).then((cache) => {\n            return cache.addAll(STATIC_ASSETS);\n        }));\n});\n\n\nself.addEventListener('fetch', (event) => {\n    const requestUrl = new URL(event.request.url);\n    if (requestUrl.origin === location.origin) {\n\n        // index.html\n        if (requestUrl.pathname === '/') {\n            event.respondWith(caches.match('/'));\n            return;\n        }\n\n        // add images to photo cache\n        if (requestUrl.pathname.startsWith('/img/')) {\n            event.respondWith(servePhoto(event.request));\n            return;\n        }\n\n    }\n\n    // Don't cache PUT/POST requests\n    if (event.request.method !== 'GET') return;\n\n    // cache default method\n    // https://jakearchibald.com/2014/offline-cookbook/#on-network-response\n    // If the request is in the cache, return it\n    // else go to the network, cache the response and return it at the same time\n    event.respondWith(\n        caches.open(CACHE_NAME).then(cache => {\n            return cache.match(event.request).then(response => {\n                return response || fetch(event.request).then(response => {\n                    console.log(response);\n                    cache.put(event.request, response.clone());\n                    return response;\n                });\n            });\n        })\n    );\n});\n\n//Listens for a sync event,\n// post messages to client\nself.addEventListener('sync', (event) => {\n    if(event.tag === 'review-sync'){\n        console.log('sync event received by sw');\n        event.waitUntil(sendMessagetoSW({ message: 'post-reviews'}));\n    }\n});\n\nfunction sendMessagetoSW(message){\n    return clients.matchAll()\n    .then((clients) => {\n        clients.forEach(client => client.postMessage(message));\n    })\n}\n\nfunction servePhoto(request) {\n    var storageUrl = request.url.replace(/-\\d+\\.[^.]+$/, '');\n\n    return caches.open(CACHE_IMAGES).then(cache => {\n        return cache.match(storageUrl).then(response => {\n            if (response) return response;\n\n            return fetch(request).then(networkResponse => {\n                cache.put(storageUrl, networkResponse.clone());\n                return networkResponse;\n            });\n        });\n    });\n}"]}